--Tabla Clientes 

CREATE TABLE C##finnk.tab_listado_clientes(
id_cliente NUMBER GENERATED BY DEFAULT AS IDENTITY,
correo_cliente VARCHAR(40) NOT NULL,
CONSTRAINT llavep_cliente PRIMARY KEY (id_cliente));


--Tabla Restaurantes 
CREATE TABLE C##finnk.tab_listado_restaurante(
id_restaurante NUMBER GENERATED BY DEFAULT AS IDENTITY,
localidad_restaurante VARCHAR2(40) NOT NULL,
estado_restaurante CHAR(1) NOT NULL CHECK (estado_restaurante IN ('Y','N')),
CONSTRAINT llavep_restaurante PRIMARY KEY (id_restaurante)

);
ALTER TABLE C##finnk.tab_listado_restaurante
ADD total_ventas NUMBER DEFAULT 0;


--Tabla Empleados 

CREATE TABLE C##finnk.tab_listado_empleados(
id_empleado NUMBER GENERATED BY DEFAULT AS IDENTITY,
nombre_empleado VARCHAR2(40) NOT NULL,
apellidos_empleado VARCHAR2(40) NOT NULL,
correo_empleado varchar (40) NOT NULL,
telefono_empleado NUMBER NOT NULL,
salario_empleado NUMBER NOT NULL,
puesto_empleado VARCHAR2(40)NOT NULL,
nacionalidad_empleado VARCHAR2(40) NOT NULL,
estado_empleado CHAR(1) NOT NULL CHECK (estado_empleado IN ('Y','N')),
fk_restaurante NUMBER,
CONSTRAINT llavep_empleado PRIMARY KEY (id_empleado),
CONSTRAINT fk_resturante_listador FOREIGN KEY (fk_restaurante) REFERENCES C##finnk.tab_listado_restaurante(id_restaurante)
);


--Tabla Reclamo
CREATE TABLE C##finnk.tab_listado_reclamos(
id_reclamos NUMBER GENERATED BY DEFAULT AS IDENTITY,
nombre_reclamo VARCHAR2(40) NOT NULL,
comentario_reclamo VARCHAR2(150) NOT NULL,
recomendar CHAR(1) NOT NULL CHECK (recomendar IN ('Y','N')),
fk_reclamos NUMBER,
CONSTRAINT llavep_reclamos PRIMARY KEY (id_reclamos),
CONSTRAINT fk_reclamos_listador FOREIGN KEY (fk_reclamos) REFERENCES C##finnk.tab_listado_clientes(id_cliente)
);

--Tabla comidas
CREATE TABLE C##finnk.tab_catalogo_comidas(
id_catalogo NUMBER GENERATED BY DEFAULT AS IDENTITY,
imagen_comida VARCHAR2(200) NOT NULL,
nombre_comida VARCHAR(40) NOT NULL,
precio_comida NUMBER NOT NULL,
existencias_comida NUMBER NOT NULL,
estado_comida CHAR(1) NOT NULL CHECK (estado_comida IN ('Y','N')),
CONSTRAINT llavep_catalogo PRIMARY KEY (id_catalogo)
);

--Creación de las siguentes tablas para los triggers
CREATE TABLE audit_tab_listado_clientes (
    id_cliente NUMBER,
    operation_type VARCHAR2(10),
    operation_time TIMESTAMP
);

CREATE TABLE registro_cambios_reclamos (
    id_registro NUMBER GENERATED BY DEFAULT AS IDENTITY,
    id_reclamo NUMBER,
    operacion VARCHAR2(10),
    fecha DATE,
    CONSTRAINT pk_registro_cambios PRIMARY KEY (id_registro)
);

CREATE TABLE C##finnk.tabla_ventas_relacionada (
    id_venta NUMBER GENERATED BY DEFAULT AS IDENTITY,
    restaurante_id NUMBER,
    monto_venta NUMBER,
    fecha_venta DATE,
    CONSTRAINT fk_restaurante FOREIGN KEY (restaurante_id) REFERENCES tab_listado_restaurante(id_restaurante)
);

Drop TABLE C##finnk.tab_catalogo_comidas;
DROP TABLE C##finnk.tab_listado_reclamos;
DROP TABLE C##finnk.tab_listado_restaurante;
DROP TABLE C##finnk.tab_listado_empleados;
DROP TABLE C##finnk.tab_listado_clientes;




--Llenado--


--Clientes
select * from  C##finnk.tab_listado_clientes;

BEGIN
INSERT INTO C##finnk.tab_listado_clientes (id_cliente, correo_cliente) 
VALUES (1,'JBravo@gmail.com.com');
INSERT INTO C##finnk.tab_listado_clientes (id_cliente, correo_cliente) 
VALUES (2,'Fernando@gmail.com.com');
INSERT INTO C##finnk.tab_listado_clientes (id_cliente, correo_cliente) 
VALUES (3,'Gabriel@gmail.com.com');
END;
--Restaurantes 

select * from  C##finnk.tab_listado_restaurante;

BEGIN
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (1, 'Cartago Metropolis', 'Y');
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (2,' Cartago Metropolis','Y');
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (3,'Escazu','Y');
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (4,' San Jose','Y');
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (5,' Heredia','Y');
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (6,' Cartago Centro','N');
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (8,'Finnk Limon','N');
END;



select * from C##finnk.tab_listado_empleados;

BEGIN
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado)
  VALUES (1, 'Jose', 'vargas leiton', 'jose8899@hotmail.com', '87065480', '650400', 'gerente', 'Costarricense', 'Y');
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado)
  VALUES (2, 'David', 'vargas vargas', 'david@gmail.com', '8818823', '375000', 'cocinero', 'Costarricense', 'Y');
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado)
  VALUES (3, 'Marcela', 'vargas robledo', 'marce445ro@outlook.com', '85251321', '520000', 'cocinero', 'Costarricense', 'N');
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado)
  VALUES (4, 'Carolina', 'vargas robledo', 'caro445ro@outlook.com', '85251321', '520000', 'dependiente', 'Panameno', 'N');
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado)
  VALUES (5, 'Fabi', 'vargas robledo', 'fabi445ro@outlook.com', '85251321', '520000', 'cocinero', 'Costarricense', 'N');
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado)
  VALUES (6, 'Julio', 'Ovares Fallas', 'julio@outlook.com', '555444', '522000', 'dependiente', 'Costarricense', 'N');
  
  COMMIT;
END;




select * from C##finnk.tab_listado_reclamos;

BEGIN
  INSERT INTO  C##finnk.tab_listado_reclamos (id_reclamos,nombre_reclamo, comentario_reclamo, recomendar) 
  VALUES (1,'Karen','No me hicieron la reservacion', 'N');

  INSERT INTO  C##finnk.tab_listado_reclamos (id_reclamos,nombre_reclamo, comentario_reclamo, recomendar)  
  VALUES (2,'Marta','Me hicieron la reservacion en otro restaurante', 'N');

  INSERT INTO  C##finnk.tab_listado_reclamos (id_reclamos,nombre_reclamo, comentario_reclamo, recomendar) 
  VALUES (3,'Daniel','Excelente servicio', 'Y');

  INSERT INTO  C##finnk.tab_listado_reclamos (id_reclamos,nombre_reclamo, comentario_reclamo, recomendar) 
  VALUES (4,'Fabricio','Excelente', 'Y');

  INSERT INTO  C##finnk.tab_listado_reclamos (id_reclamos,nombre_reclamo, comentario_reclamo, recomendar) 
  VALUES (5, 'Miguel', 'No tenian pollo', 'N');  
END;



select * from C##finnk.tab_catalogo_comidas;

BEGIN
  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida)
  VALUES (1, 'imagen1.jpg', 'Hamburguesa Artesanal', 5.99, 100, 'Y');

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida)
  VALUES (2, 'imagen2.jpg', 'Pizza Artesanal', 8.49, 80, 'Y');

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida)
  VALUES (3, 'imagen3.jpg', 'Sushi', 10.99, 60, 'Y');

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida)
  VALUES (4, 'imagen4.jpg', 'Pollo frito', 7.99, 0, 'N');

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida)
  VALUES (5, 'imagen5.jpg', 'Carne con champiñones', 6.49, 110, 'Y');

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida)
  VALUES (6, 'imagen6.jpg', 'Pasta', 9.99, 70, 'Y');

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida)
  VALUES (7, 'imagen7.jpg', 'Carvonara', 4.99, 130, 'Y');

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida)
  VALUES (8, 'imagen8.jpg', 'Burrito', 7.49, 40, 'Y');

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida)
  VALUES (9, 'imagen9.jpg', 'Sándwich de pollo', 5.49, 0, 'N');

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida)
  VALUES (10, 'imagen10.jpg', 'Filete de pescado', 11.99, 50, 'Y');
END;












--25 PROCEDIMIENTOS Jose Bravo*****************************************************************************************************************************


--P1

CREATE OR REPLACE PROCEDURE C##finnk.InsertarCliente(
    p_id_cliente IN C##finnk.tab_listado_clientes.id_cliente%TYPE,
    p_correo_cliente IN C##finnk.tab_listado_clientes.correo_cliente%TYPE
) AS
BEGIN
    INSERT INTO C##finnk.tab_listado_clientes(id_cliente, correo_cliente)
    VALUES (p_id_cliente, p_correo_cliente);
    COMMIT;
END;

--P2
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerNumeroRestaurantesPorLocalidad(
    p_localidad_restaurante IN C##finnk.tab_listado_restaurante.localidad_restaurante%TYPE,
    p_numero_restaurantes OUT NUMBER
) AS
BEGIN
    SELECT COUNT(*)
    INTO p_numero_restaurantes
    FROM C##finnk.tab_listado_restaurante
    WHERE localidad_restaurante = p_localidad_restaurante;
END;

--P3
CREATE OR REPLACE PROCEDURE C##finnk.kEliminarReclamo(
    p_id_reclamo IN C##finnk.tab_listado_reclamos.id_reclamos%TYPE
)AS
BEGIN
    DELETE FROM C##finnk.tab_listado_reclamos
    WHERE id_reclamos = p_id_reclamo;
    COMMIT;
END;

--P4
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerEmpleadosPorRestaurante(
    p_id_restaurante IN C##finnk.tab_listado_restaurante.id_restaurante%TYPE
)AS
BEGIN
    SELECT *
    FROM C##finnk.tab_listado_empleados
    WHERE fk_restaurante = p_id_restaurante;
    
END;


--P5
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerTotalReclamos(
    p_total_reclamos OUT NUMBER
)AS
BEGIN
    SELECT COUNT (*)
    INTO p_total_reclamos
    FROM C##finnk.tab_listado_reclamos;
END;


--P6
CREATE OR REPLACE PROCEDURE C##finnk.EliminarCliente(
    p_id_cliente IN C##finnk.tab_listado_clientes.id_cliente%TYPE
)AS
BEGIN
    DELETE FROM C##finnk.tab_listado_clientes
    WHERE id_cliente = p_id_cliente;
    COMMIT;
END;

--P7
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarSalarioEmpleado(
    p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE,
    p_salario_empleado IN C##finnk.tab_listado_empleados.salario_empleado%TYPE   
)AS
BEGIN
    UPDATE C##finnk.tab_listado_empleados
    SET salario_empleado = p_salario_empleado
    WHERE id_empleado = p_id_empleado;
    COMMIT;
END;

--P8
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerNumeroEmpleadosPorTienda(
    p_id_restaurante IN C##finnk.tab_listado_restaurante.id_restaurante%TYPE,
    p_numero_empleados OUT NUMBER
)AS
BEGIN
    SELECT COUNT (*)
    INTO p_numero_empleados
    FROM C##finnk.tab_listado_empleados
    WHERE fk_restaurante = p_id_restaurante;
END;


--P9

CREATE OR REPLACE PROCEDURE C##finnk.ObtenerClientesPorCorreo(
    p_correo_cliente IN VARCHAR2
) AS
    v_cliente C##finnk.tab_listado_clientes%ROWTYPE;
BEGIN
    SELECT *
    INTO v_cliente
    FROM C##finnk.tab_listado_clientes
    WHERE correo_cliente = p_correo_cliente;
    
    DBMS_OUTPUT.PUT_LINE ('ID_Cliente: ' || v_cliente.id_cliente);
    DBMS_OUTPUT.PUT_LINE ('Correo_Cliente: ' || v_cliente.correo_cliente);    
END;

--P10
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarNombreEmpleado(
    p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE,
    p_nombre_empleado IN C##finnk.tab_listado_empleados.nombre_empleado%TYPE
)AS
BEGIN
    UPDATE C##finnk.tab_listado_empleados
    SET nombre_empleado = p_nombre_empleado
    WHERE id_empleado = p_id_empleado;
    COMMIT;    
END;

--P11
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerEmpleadosPorSalarioMaximo AS
  v_id_empleado C##finnk.tab_listado_empleados.id_empleado%TYPE;
  v_nombre_empleado C##finnk.tab_listado_empleados.nombre_empleado%TYPE;

BEGIN
  DECLARE
    v_salario_maximo C##finnk.tab_listado_empleados.salario_empleado%TYPE;
  BEGIN
    SELECT MAX(salario_empleado) INTO v_salario_maximo FROM c##finnk.tab_listado_empleados;
    
    FOR emp IN (SELECT *
                FROM C##finnk.tab_listado_empleados
                WHERE salario_empleado = v_salario_maximo)
    LOOP
      v_id_empleado := emp.id_empleado;
      v_nombre_empleado := emp.nombre_empleado;
      
      DBMS_OUTPUT.PUT_LINE('ID_Empleado: ' || v_id_empleado);
      DBMS_OUTPUT.PUT_LINE('Nombre_Empleado: ' || v_nombre_empleado);
    END LOOP;
  END;
END;


--P12
CREATE OR REPLACE PROCEDURE C##finnk.InsertarReclamo(
  p_id_reclamo IN C##finnk.tab_listado_reclamos.id_reclamos%TYPE,
  p_nombre_reclamo IN C##finnk.tab_listado_reclamos.nombre_reclamo%TYPE,
  p_comentario_reclamo IN C##finnk.tab_listado_reclamos.comentario_reclamo%TYPE
) AS
BEGIN
  INSERT INTO C##finnk.tab_listado_reclamos(id_reclamos, nombre_reclamo, comentario_reclamo)
  VALUES (p_id_reclamo, p_nombre_reclamo, p_comentario_reclamo);
  COMMIT;
END;

--P13
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerEmpleadosPorSalarioMinimo AS
  v_id_empleado C##finnk.tab_listado_empleados.id_empleado%TYPE;
  v_nombre_empleado C##finnk.tab_listado_empleados.nombre_empleado%TYPE;

BEGIN
  DECLARE
    v_salario_minimo C##finnk.tab_listado_empleados.salario_empleado%TYPE;
  BEGIN
    SELECT MIN(salario_empleado) INTO v_salario_minimo FROM C##finnk.tab_listado_empleados;
    
    FOR emp IN (SELECT *
                FROM C##finnk.tab_listado_empleados
                WHERE salario_empleado >= v_salario_minimo)
    LOOP
      v_id_empleado := emp.id_empleado;
      v_nombre_empleado := emp.nombre_empleado;
      
      DBMS_OUTPUT.PUT_LINE('ID_Empleado: ' || v_id_empleado);
      DBMS_OUTPUT.PUT_LINE('Nombre_Empleado: ' || v_nombre_empleado);
    END LOOP;
  END;
END;

--P14
CREATE OR REPLACE PROCEDURE C##finnk.InsertarRestaurante(
  p_id_restaurante IN C##finnk.tab_listado_restaurante.id_restaurante%TYPE,
  p_localidad_restaurante IN C##finnk.tab_listado_restaurante.localidad_restaurante%TYPE,
  p_estado_restaurante IN C##finnk.tab_listado_restaurante.estado_restaurante%TYPE
) AS
BEGIN 
  INSERT INTO C##finnk.tab_listado_restaurante(id_restaurante, localidad_restaurante, estado_restaurante)
  VALUES (p_id_restaurante, p_localidad_restaurante, p_estado_restaurante);
  COMMIT;
END;

--P15
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarExistenciasComida(
    p_id_catalogo IN C##finnk.tab_catalogo_comidas.id_catalogo%TYPE,
    P_existencias_comida IN C##finnk.tab_catalogo_comidas.existencias_comida%TYPE
)AS
BEGIN
    UPDATE C##finnk.tab_catalogo_comidas
    SET existencias_comida = p_existencias_comida
    WHERE id_catalogo = p_id_catalogo;
    COMMIT;
END;

--P16

CREATE OR REPLACE PROCEDURE C##finnk.ObtenerComidasAgotados AS
    --Declaramos una variable de registro para almacenar los resultados
    v_comida C##finnk.tab_catalogo_comidas%ROWTYPE;
BEGIN
    -- utiliza INTO para almacenar los resultados de la consulta en la variable de registro
    SELECT *
    INTO v_comida
    FROM C##finnk.tab_catalogo_comidas
    WHERE existencias_comida = 0;
    
    -- Realizar alguna operación con los resultados, por ejemplo, mostrar los datos en la salida
  DBMS_OUTPUT.PUT_LINE('ID_Catalogo: ' || v_comida.id_catalogo);
  DBMS_OUTPUT.PUT_LINE('Imagen_Comida: ' || v_comida.imagen_comida);
  -- Continúa con las demás columnas según tus necesidades
END;
    
    
--P17
CREATE OR REPLACE PROCEDURE C##finnk.EliminarComida(
    p_id_catalogo IN C##finnk.tab_catalogo_comidas.id_catalogo%TYPE
)AS
BEGIN
    DELETE FROM C##finnk.tab_catalogo_comidas
    WHERE id_catalogo = p_id_catalogo;
    COMMIT;
END;
    

--P18
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerComidaDisponibles AS
BEGIN
  CURSOR c_comidas IS
    SELECT *    FROM C##finnk.tab_catalogo_comidaproductos
    WHERE existencias_comida > 0;
  

  v_id_catalogo C##finnk.tab_catalogo_comidas.id_catalogo%TYPE;
  v_imagen_producto C##finnk.tab_catalogo_productos.imagen_producto%TYPE;

  
   OPEN c_comidas;
  FETCH c_comidas INTO v_id_catalogo, v_imagen_comida, ...;
  
   LOOP
    DBMS_OUTPUT.PUT_LINE('ID_Catalogo: ' || v_id_catalogo);
    DBMS_OUTPUT.PUT_LINE('Imagen_Comida: ' || v_imagen_comida);
    
     FETCH c_comidas INTO v_id_catalogo, v_imagen_comida, ...;
    
      EXIT WHEN c_comidas%NOTFOUND;
  END LOOP;
  
  CLOSE c_comidas;
END;


--P19

CREATE OR REPLACE PROCEDURE C##finnk.ObtenerNumeroComidas(
    p_numero_comidas OUT NUMBER
)AS
BEGIN
    SELECT COUNT (*)
    INTO p_numero_comidas
    FROM C##finnk.tab_catalogo_comidas;
END;
    
    
--P20
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarPrecioComida(
    p_id_catalogo IN C##finnk.tab_catalogo_comidas.id_catalogo%TYPE,
    p_precio_comida IN C##finnk.tab_catalogo_comidas.precio_comida%TYPE
)AS
BEGIN
    UPDATE C##finnk.tab_catalogo_comidas
    SET precio_comida = p_precio_comida
    WHERE id_catalogo = p_id_catalogo;
    COMMIT;
END;

    
    
--P21

CREATE OR REPLACE PROCEDURE C##finnk.ActualizarExistenciasComida(
  p_id_catalogo IN C##finnk.tab_catalogo_comidas.id_catalogo%TYPE,
  p_existencias_comida IN C##finnk.tab_catalogo_comidas.existencias_comida%TYPE
) AS
BEGIN
  UPDATE C##finnk.tab_catalogo_comidas
  SET existencias_comida = p_existencias_comida
  WHERE id_catalogo = p_id_catalogo;
  COMMIT;
END;
    
  
--P22
CREATE OR REPLACE PROCEDURE C##finnk.SeleccionarClientes AS
    TYPE ClientesCursorType IS REF CURSOR;
    clientes_cursor ClientesCursorType;
    v_id_cliente C##finnk.tab_listado_clientes.id_cliente%TYPE;
    v_correo_cliente C##finnk.tab_listado_clientes.correo_cliente%TYPE;
BEGIN
    OPEN clientes_cursor FOR
    SELECT id_cliente, correo_cliente
    FROM C##finnk.tab_listado_clientes;

    LOOP
        FETCH clientes_cursor INTO v_id_cliente, v_correo_cliente;
        EXIT WHEN clientes_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID Cliente: ' || v_id_cliente || ', Correo Cliente: ' || v_correo_cliente);
    END LOOP;

    CLOSE clientes_cursor;
END;

--P23
CREATE OR REPLACE PROCEDURE C##finnk.ContarClientes AS
    v_total_clientes NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_total_clientes
    FROM C##finnk.tab_listado_clientes;

    DBMS_OUTPUT.PUT_LINE('Total de clientes: ' || v_total_clientes);
END;

--P24
CREATE OR REPLACE PROCEDURE C##finnk.SeleccionarRestaurantes AS
    TYPE RestaurantesCursorType IS REF CURSOR;
    restaurantes_cursor RestaurantesCursorType;
    v_id_restaurante C##finnk.tab_listado_restaurante.id_restaurante%TYPE;
    v_localidad_restaurante C##finnk.tab_listado_restaurante.localidad_restaurante%TYPE;
    v_estado_restaurante C##finnk.tab_listado_restaurante.estado_restaurante%TYPE;
BEGIN
    OPEN restaurantes_cursor FOR
    SELECT id_restaurante, localidad_restaurante, estado_restaurante
    FROM C##finnk.tab_listado_restaurante;

    LOOP
        FETCH restaurantes_cursor INTO v_id_restaurante, v_localidad_restaurante, v_estado_restaurante;
        EXIT WHEN restaurantes_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID Restaurante: ' || v_id_restaurante || ', Localidad: ' || v_localidad_restaurante || ', Estado: ' || v_estado_restaurante);
    END LOOP;

    CLOSE restaurantes_cursor;
END;


--P25
CREATE OR REPLACE PROCEDURE C##finnk.ContarRestaurantesActivos AS
    v_total_activos NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_total_activos
    FROM C##finnk.tab_listado_restaurante
    WHERE estado_restaurante = 'Y';

    DBMS_OUTPUT.PUT_LINE('Total de restaurantes activos: ' || v_total_activos);
END;
--10 VISTAS Jose Bravo *****************************************************************************************************************************

--V1
CREATE OR REPLACE VIEW C##finnk.Vista_Cliente AS
SELECT id_cliente || '-' || correo_cliente AS Informacion_Cliente
FROM C##finnk.tab_listado_clientes;

SELECT Informacion_Cliente FROM C##finnk.Vista_cliente;

--V2
--Vista de empleados con salarios iguales o inferiores al promedio de salarios
CREATE OR REPLACE VIEW C##finnk.Vista_Empleados AS
SELECT id_empleado, nombre_empleado, apellidos_empleado, salario_empleado
FROM C##finnk.tab_listado_empleados
WHERE salario_empleado <= (SELECT AVG(salario_empleado) FROM C##finnk.tab_listado_empleados);


SELECT * FROM C##finnk.Vista_Empleados;


--V3
-- Esta vista muestra el nombre, correo y el id del reclamo  del cliente 

CREATE OR REPLACE VIEW C##finnk.Vista_Reclamos AS
SELECT
    c.id_cliente AS ID_Cliente,
    c.correo_cliente AS Correo_Cliente,
    r.comentario_reclamo AS Reclamo
FROM 
    C##finnk.tab_listado_clientes c
JOIN 
    C##finnk.tab_listado_reclamos r ON c.id_cliente = r.fk_reclamos;
    
SELECT * FROM C##finnk.Vista_Reclamos;


--V4
--Mostrar la cantidad total de empleados

CREATE OR REPLACE VIEW C##finnk.Vista_Total_Empleados AS
SELECT COUNT (*) "CANTIDAD DE EMPLEADOS" FROM C##finnk.tab_listado_empleados;

Select * FROM C##finnk.Vista_Total_Empleados;

--V5
--Mostrar la cantidad total de clientes
CREATE OR REPLACE VIEW C##finnk.Vista_Total_Clientes AS
SELECT COUNT (*) "CANTIDAD DE EMPLEADOS" FROM C##finnk.tab_listado_clientes;

Select * FROM C##finnk.Vista_Total_Clientes;

--V6
--Vista para ver el total del salario de todos los empleados 
CREATE OR REPLACE VIEW C##finnk.Vista_Empleados_Salarios AS
SELECT sum(salario_empleado)"TOTAL DE SALARIO" FROM C##finnk.tab_listado_empleados;

SELECT * FROM C##finnk.Vista_Empleados_Salarios;

--V7
--Conteo y agrupamientos de los empleados por puesto

CREATE OR REPLACE VIEW C##finnk.Vista_Empleado_Puesto AS
Select puesto_empleado,
 COUNT (*) AS Conteo_Empleados
FROM
C##finnk.tab_listado_empleados
GROUP BY 
puesto_empleado;

SELECT * FROM C##finnk.Vista_Empleado_Puesto;

--V8
--Mostrar salarios de menor a mayor 
CREATE OR REPLACE VIEW C##finnk.Vista_Salarios_May_Men AS
SELECT * FROM C##finnk.tab_listado_empleados
ORDER BY salario_empleado ASC;

Select * FROM C##finnk.Vista_Salarios_May_Men;

--V9
--Mostrar los empleados que son Costarricenses
CREATE OR REPLACE VIEW C##finnk.Vista_Empleados_Cos AS
SELECT id_empleado, nombre_empleado, nacionalidad_empleado
FROM
 C##finnk.tab_listado_empleados
WHERE
 nacionalidad_empleado = 'Costarricense';
 
SELECT * FROM C##finnk.Vista_Empleados_Cos;


--V10
--Motrar los empleados que tengan estado = true
CREATE OR REPLACE VIEW C##finnk.Vista_Empleados_True AS
SELECT id_empleado, nombre_empleado, estado_empleado
From 
 C##finnk.tab_listado_empleados
WHERE
estado_empleado = 'Y';

SELECT * FROM C##finnk.Vista_Empleados_True;
