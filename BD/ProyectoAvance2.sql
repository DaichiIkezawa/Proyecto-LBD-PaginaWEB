--Tabla Clientes 

CREATE TABLE C##finnk.tab_listado_clientes(
id_cliente NUMBER GENERATED BY DEFAULT AS IDENTITY,
correo_cliente VARCHAR(40) NOT NULL,
CONSTRAINT llavep_cliente PRIMARY KEY (id_cliente));


--Tabla Restaurantes 
CREATE TABLE C##finnk.tab_listado_restaurante(
id_restaurante NUMBER GENERATED BY DEFAULT AS IDENTITY,
localidad_restaurante VARCHAR2(40) NOT NULL,
estado_restaurante CHAR(1) NOT NULL CHECK (estado_restaurante IN ('Y','N')),
CONSTRAINT llavep_restaurante PRIMARY KEY (id_restaurante)

);
ALTER TABLE C##finnk.tab_listado_restaurante
ADD total_ventas NUMBER DEFAULT 0;


--Tabla Empleados 

CREATE TABLE C##finnk.tab_listado_empleados(
id_empleado NUMBER GENERATED BY DEFAULT AS IDENTITY,
nombre_empleado VARCHAR2(40) NOT NULL,
apellidos_empleado VARCHAR2(40) NOT NULL,
correo_empleado varchar (40) NOT NULL,
telefono_empleado NUMBER NOT NULL,
salario_empleado NUMBER NOT NULL,
puesto_empleado VARCHAR2(40)NOT NULL,
nacionalidad_empleado VARCHAR2(40) NOT NULL,
estado_empleado CHAR(1) NOT NULL CHECK (estado_empleado IN ('Y','N')),
fk_restaurante NUMBER,
CONSTRAINT llavep_empleado PRIMARY KEY (id_empleado),
CONSTRAINT fk_resturante_listador FOREIGN KEY (fk_restaurante) REFERENCES C##finnk.tab_listado_restaurante(id_restaurante)
);

alter table c##finnk.tab_listado_empleados add fecha_contratacion date;


--Tabla Reclamo
CREATE TABLE C##finnk.tab_listado_reclamos(
id_reclamos NUMBER GENERATED BY DEFAULT AS IDENTITY,
nombre_reclamo VARCHAR2(40) NOT NULL,
comentario_reclamo VARCHAR2(150) NOT NULL,
recomendar CHAR(1) NOT NULL CHECK (recomendar IN ('Y','N')),
fk_reclamos NUMBER,
CONSTRAINT llavep_reclamos PRIMARY KEY (id_reclamos),
CONSTRAINT fk_reclamos_listador FOREIGN KEY (fk_reclamos) REFERENCES C##finnk.tab_listado_clientes(id_cliente)
);
alter table c##finnk.tab_listado_reclamos add fk_empleado_id number;
alter table c##finnk.tab_listado_reclamos add fecha_reclamo date;

ALTER TABLE c##finnk.tab_listado_reclamos ADD CONSTRAINT fk_reclamos_empleado
FOREIGN KEY (fk_empleado_id) REFERENCES c##finnk.tab_listado_empleados(id_empleado);


--Tabla comidas
CREATE TABLE C##finnk.tab_catalogo_comidas(
id_catalogo NUMBER GENERATED BY DEFAULT AS IDENTITY,
imagen_comida VARCHAR2(200) NOT NULL,
nombre_comida VARCHAR(40) NOT NULL,
precio_comida NUMBER NOT NULL,
existencias_comida NUMBER NOT NULL,
estado_comida CHAR(1) NOT NULL CHECK (estado_comida IN ('Y','N')),
CONSTRAINT llavep_catalogo PRIMARY KEY (id_catalogo)
);
ALTER TABLE c##finnk.tab_catalogo_comidas ADD id_restaurante NUMBER;

ALTER TABLE c##finnk.tab_catalogo_comidas ADD CONSTRAINT fk_restaurante_catalogo
FOREIGN KEY (id_restaurante) REFERENCES c##finnk.tab_listado_restaurante(id_restaurante);

--Creación de las siguentes tablas para los triggers
CREATE TABLE audit_tab_listado_clientes (
    id_cliente NUMBER,
    operation_type VARCHAR2(10),
    operation_time TIMESTAMP
);

alter table c##finnk.tab_listado_clientes add nombre_cliente varchar2(50);

CREATE TABLE registro_cambios_reclamos (
    id_registro NUMBER GENERATED BY DEFAULT AS IDENTITY,
    id_reclamo NUMBER,
    operacion VARCHAR2(10),
    fecha DATE,
    CONSTRAINT pk_registro_cambios PRIMARY KEY (id_registro)
);

CREATE TABLE C##finnk.tabla_ventas_relacionada (
    id_venta NUMBER GENERATED BY DEFAULT AS IDENTITY,
    restaurante_id NUMBER,
    monto_venta NUMBER,
    fecha_venta DATE,
    CONSTRAINT fk_restaurante FOREIGN KEY (restaurante_id) REFERENCES tab_listado_restaurante(id_restaurante)
);

ALTER TABLE c##finnk.tabla_ventas_relacionada ADD (fk_empleado NUMBER);

ALTER TABLE c##finnk.tabla_ventas_relacionada ADD CONSTRAINT fk_empleado_listado
FOREIGN KEY (fk_empleado) REFERENCES c##finnk.tab_listado_empleados(id_empleado);


Drop TABLE C##finnk.tab_catalogo_comidas;
DROP TABLE C##finnk.tab_listado_reclamos;
DROP TABLE C##finnk.tab_listado_restaurante;
DROP TABLE C##finnk.tab_listado_empleados;
DROP TABLE C##finnk.tab_listado_clientes;
DROP TABLE C##finnk.tabla_ventas_relacionada;




--Llenado--


--Clientes
select * from  C##finnk.tab_listado_clientes;

BEGIN
INSERT INTO C##finnk.tab_listado_clientes (id_cliente, correo_cliente, nombre_cliente) 
VALUES (1,'JBravo@gmail.com.com', 'Jose');
INSERT INTO C##finnk.tab_listado_clientes (id_cliente, correo_cliente, nombre_cliente) 
VALUES (2,'Fernando@gmail.com.com', 'Fernando');
INSERT INTO C##finnk.tab_listado_clientes (id_cliente, correo_cliente, nombre_cliente) 
VALUES (3,'Gabriel@gmail.com.com', 'Gabriel');
END;
--Restaurantes 

select * from  C##finnk.tab_listado_restaurante;

BEGIN
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (1, 'Cartago Metropolis', 'Y');
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (2,' Cartago Metropolis','Y');
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (3,'Escazu','Y');
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (4,' San Jose','Y');
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (5,' Heredia','Y');
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (6,' Cartago Centro','N');
INSERT INTO C##finnk.tab_listado_restaurante (id_restaurante, localidad_restaurante, estado_restaurante) 
VALUES (8,'Finnk Limon','N');
END;



select * from C##finnk.tab_listado_empleados;

BEGIN
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado, fk_restaurante, fecha_contratacion)
  VALUES (1, 'Jose', 'vargas leiton', 'jose8899@hotmail.com', '87065480', '650400', 'gerente', 'Costarricense', 'Y', 1);
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado, fk_restaurante, fecha_contratacion)
  VALUES (2, 'David', 'vargas vargas', 'david@gmail.com', '8818823', '375000', 'cocinero', 'Costarricense', 'Y', 2);
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado, fk_restaurante, fecha_contratacion)
  VALUES (3, 'Marcela', 'vargas robledo', 'marce445ro@outlook.com', '85251321', '520000', 'cocinero', 'Costarricense', 'N',2);
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado,fk_restaurante, fecha_contratacion)
  VALUES (4, 'Carolina', 'vargas robledo', 'caro445ro@outlook.com', '85251321', '520000', 'dependiente', 'Panameno', 'N',6);
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado,fk_restaurante, fecha_contratacion)
  VALUES (5, 'Fabi', 'vargas robledo', 'fabi445ro@outlook.com', '85251321', '520000', 'cocinero', 'Costarricense', 'N',8);
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado,fk_restaurante, fecha_contratacion)
  VALUES (6, 'Julio', 'Ovares Fallas', 'julio@outlook.com', '555444', '522000', 'dependiente', 'Costarricense', 'N',1);
  
  update c##finnk.tab_listado_empleados set fecha_contratacion = sysdate;
  
  COMMIT;
END;

delete from c##finnk.tab_listado_reclamos;


select * from C##finnk.tab_listado_reclamos;

BEGIN
  INSERT INTO C##finnk.tab_listado_reclamos (id_reclamos, nombre_reclamo, comentario_reclamo, recomendar, fk_reclamos, fk_empleado_id, fecha_reclamo) 
  VALUES (1, 'Karen', 'No me hicieron la reservacion', 'N', null, null, sysdate);

  INSERT INTO C##finnk.tab_listado_reclamos (id_reclamos, nombre_reclamo, comentario_reclamo, recomendar, fk_reclamos, fk_empleado_id, fecha_reclamo)
  VALUES (2, 'Marta', 'Me hicieron la reservacion en otro restaurante', 'N', null, null, sysdate);

  INSERT INTO C##finnk.tab_listado_reclamos (id_reclamos, nombre_reclamo, comentario_reclamo, recomendar, fk_reclamos, fk_empleado_id, fecha_reclamo)
  VALUES (3, 'Daniel', 'Excelente servicio', 'Y', null, null, sysdate);

  INSERT INTO C##finnk.tab_listado_reclamos (id_reclamos, nombre_reclamo, comentario_reclamo, recomendar, fk_reclamos, fk_empleado_id, fecha_reclamo)
  VALUES (4, 'Fabricio', 'Excelente', 'Y', null, null, sysdate);

  INSERT INTO C##finnk.tab_listado_reclamos (id_reclamos, nombre_reclamo, comentario_reclamo, recomendar, fk_reclamos, fk_empleado_id, fecha_reclamo)
  VALUES (5, 'Carolina', 'No tenian pollo', 'N', null, 4, sysdate);

  INSERT INTO C##finnk.tab_listado_reclamos (id_reclamos, nombre_reclamo, comentario_reclamo, recomendar, fk_reclamos, fk_empleado_id, fecha_reclamo)
  VALUES (6, 'Jose', 'Buana la pizza', 'N', 1, null, sysdate);

  INSERT INTO C##finnk.tab_listado_reclamos (id_reclamos, nombre_reclamo, comentario_reclamo, recomendar, fk_reclamos, fk_empleado_id, fecha_reclamo)
  VALUES (7, 'Gabriel', 'Baño estaba sucio', 'N', 3, null, sysdate);

  INSERT INTO C##finnk.tab_listado_reclamos (id_reclamos, nombre_reclamo, comentario_reclamo, recomendar, fk_reclamos, fk_empleado_id, fecha_reclamo)
  VALUES (8, 'Jose', 'El sushi estaba busin', 'N', 1, null, sysdate);

  INSERT INTO C##finnk.tab_listado_reclamos (id_reclamos, nombre_reclamo, comentario_reclamo, recomendar, fk_reclamos, fk_empleado_id, fecha_reclamo)
  VALUES (9, 'Carolina', 'Mal Servicio', 'N', null, 4, sysdate);
END;


select * from C##finnk.tab_catalogo_comidas;

BEGIN
  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida,id_restaurante)
  VALUES (1, 'imagen1.jpg', 'Hamburguesa Artesanal', 5.99, 100, 'Y',2);

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida,id_restaurante)
  VALUES (2, 'imagen2.jpg', 'Pizza Artesanal', 8.49, 80, 'Y',1);

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida,id_restaurante)
  VALUES (3, 'imagen3.jpg', 'Sushi', 10.99, 60, 'Y',4);

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida,id_restaurante)
  VALUES (4, 'imagen4.jpg', 'Pollo frito', 7.99, 0, 'N',5);

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida,id_restaurante)
  VALUES (5, 'imagen5.jpg', 'Carne con champiñones', 6.49, 110, 'Y',1);

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida,id_restaurante)
  VALUES (6, 'imagen6.jpg', 'Pasta', 9.99, 70, 'Y',8);

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida,id_restaurante)
  VALUES (7, 'imagen7.jpg', 'Carvonara', 4.99, 130, 'Y',2);

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida,id_restaurante)
  VALUES (8, 'imagen8.jpg', 'Burrito', 7.49, 40, 'Y',4);

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida,id_restaurante)
  VALUES (9, 'imagen9.jpg', 'Sándwich de pollo', 5.49, 0, 'N',3);

  INSERT INTO C##finnk.tab_catalogo_comidas (id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida,id_restaurante)
  VALUES (10, 'imagen10.jpg', 'Filete de pescado', 11.99, 50, 'Y',1);
END;

delete from c##finnk.tabla_ventas_relacionada;
begin
    insert into c##finnk.tabla_ventas_relacionada(id_venta, restaurante_id, monto_venta, fecha_venta, fk_empleado)
    values( 1, 1, 12000, sysdate, 1);
    
    insert into c##finnk.tabla_ventas_relacionada(id_venta, restaurante_id, monto_venta, fecha_venta, fk_empleado)
    values( 2, 1, 24000, sysdate, 1);
    
    insert into c##finnk.tabla_ventas_relacionada(id_venta, restaurante_id, monto_venta, fecha_venta, fk_empleado)
    values( 3, 2, 20000, sysdate, 4);
    
    insert into c##finnk.tabla_ventas_relacionada(id_venta, restaurante_id, monto_venta, fecha_venta, fk_empleado)
    values( 4, 3, 8900, sysdate, 3);
    
    insert into c##finnk.tabla_ventas_relacionada(id_venta, restaurante_id, monto_venta, fecha_venta, fk_empleado)
    values( 5, 4, 15000, sysdate, 2);
    
    insert into c##finnk.tabla_ventas_relacionada(id_venta, restaurante_id, monto_venta, fecha_venta, fk_empleado)
    values( 6, 5, 35000, sysdate, 5);
    
    insert into c##finnk.tabla_ventas_relacionada(id_venta, restaurante_id, monto_venta, fecha_venta, fk_empleado)
    values( 7, 6, 9900, sysdate, 4);
    
    insert into c##finnk.tabla_ventas_relacionada(id_venta, restaurante_id, monto_venta, fecha_venta, fk_empleado)
    values( 8, 8, 11500, sysdate, 6);
end;









--25 PROCEDIMIENTOS Jose Bravo*****************************************************************************************************************************


--P1

CREATE OR REPLACE PROCEDURE C##finnk.InsertarCliente(
    p_id_cliente IN C##finnk.tab_listado_clientes.id_cliente%TYPE,
    p_correo_cliente IN C##finnk.tab_listado_clientes.correo_cliente%TYPE
) AS
BEGIN
    INSERT INTO C##finnk.tab_listado_clientes(id_cliente, correo_cliente)
    VALUES (p_id_cliente, p_correo_cliente);
    COMMIT;
END;

--P2
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerNumeroRestaurantesPorLocalidad(
    p_localidad_restaurante IN C##finnk.tab_listado_restaurante.localidad_restaurante%TYPE,
    p_numero_restaurantes OUT NUMBER
) AS
BEGIN
    SELECT COUNT(*)
    INTO p_numero_restaurantes
    FROM C##finnk.tab_listado_restaurante
    WHERE localidad_restaurante = p_localidad_restaurante;
END;

--P3
CREATE OR REPLACE PROCEDURE C##finnk.kEliminarReclamo(
    p_id_reclamo IN C##finnk.tab_listado_reclamos.id_reclamos%TYPE
)AS
BEGIN
    DELETE FROM C##finnk.tab_listado_reclamos
    WHERE id_reclamos = p_id_reclamo;
    COMMIT;
END;

--P4
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerEmpleadosPorRestaurante(
    p_id_restaurante IN C##finnk.tab_listado_restaurante.id_restaurante%TYPE
)AS
BEGIN
    SELECT *
    FROM C##finnk.tab_listado_empleados
    WHERE fk_restaurante = p_id_restaurante;
    
END;


--P5
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerTotalReclamos(
    p_total_reclamos OUT NUMBER
)AS
BEGIN
    SELECT COUNT (*)
    INTO p_total_reclamos
    FROM C##finnk.tab_listado_reclamos;
END;


--P6
CREATE OR REPLACE PROCEDURE C##finnk.EliminarCliente(
    p_id_cliente IN C##finnk.tab_listado_clientes.id_cliente%TYPE
)AS
BEGIN
    DELETE FROM C##finnk.tab_listado_clientes
    WHERE id_cliente = p_id_cliente;
    COMMIT;
END;

--P7
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarSalarioEmpleado(
    p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE,
    p_salario_empleado IN C##finnk.tab_listado_empleados.salario_empleado%TYPE   
)AS
BEGIN
    UPDATE C##finnk.tab_listado_empleados
    SET salario_empleado = p_salario_empleado
    WHERE id_empleado = p_id_empleado;
    COMMIT;
END;

--P8
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerNumeroEmpleadosPorTienda(
    p_id_restaurante IN C##finnk.tab_listado_restaurante.id_restaurante%TYPE,
    p_numero_empleados OUT NUMBER
)AS
BEGIN
    SELECT COUNT (*)
    INTO p_numero_empleados
    FROM C##finnk.tab_listado_empleados
    WHERE fk_restaurante = p_id_restaurante;
END;


--P9

CREATE OR REPLACE PROCEDURE C##finnk.ObtenerClientesPorCorreo(
    p_correo_cliente IN VARCHAR2
) AS
    v_cliente C##finnk.tab_listado_clientes%ROWTYPE;
BEGIN
    SELECT *
    INTO v_cliente
    FROM C##finnk.tab_listado_clientes
    WHERE correo_cliente = p_correo_cliente;
    
    DBMS_OUTPUT.PUT_LINE ('ID_Cliente: ' || v_cliente.id_cliente);
    DBMS_OUTPUT.PUT_LINE ('Correo_Cliente: ' || v_cliente.correo_cliente);    
END;

--P10
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarNombreEmpleado(
    p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE,
    p_nombre_empleado IN C##finnk.tab_listado_empleados.nombre_empleado%TYPE
)AS
BEGIN
    UPDATE C##finnk.tab_listado_empleados
    SET nombre_empleado = p_nombre_empleado
    WHERE id_empleado = p_id_empleado;
    COMMIT;    
END;

--P11
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerEmpleadosPorSalarioMaximo AS
  v_id_empleado C##finnk.tab_listado_empleados.id_empleado%TYPE;
  v_nombre_empleado C##finnk.tab_listado_empleados.nombre_empleado%TYPE;

BEGIN
  DECLARE
    v_salario_maximo C##finnk.tab_listado_empleados.salario_empleado%TYPE;
  BEGIN
    SELECT MAX(salario_empleado) INTO v_salario_maximo FROM c##finnk.tab_listado_empleados;
    
    FOR emp IN (SELECT *
                FROM C##finnk.tab_listado_empleados
                WHERE salario_empleado = v_salario_maximo)
    LOOP
      v_id_empleado := emp.id_empleado;
      v_nombre_empleado := emp.nombre_empleado;
      
      DBMS_OUTPUT.PUT_LINE('ID_Empleado: ' || v_id_empleado);
      DBMS_OUTPUT.PUT_LINE('Nombre_Empleado: ' || v_nombre_empleado);
    END LOOP;
  END;
END;


--P12
CREATE OR REPLACE PROCEDURE C##finnk.InsertarReclamo(
  p_id_reclamo IN C##finnk.tab_listado_reclamos.id_reclamos%TYPE,
  p_nombre_reclamo IN C##finnk.tab_listado_reclamos.nombre_reclamo%TYPE,
  p_comentario_reclamo IN C##finnk.tab_listado_reclamos.comentario_reclamo%TYPE
) AS
BEGIN
  INSERT INTO C##finnk.tab_listado_reclamos(id_reclamos, nombre_reclamo, comentario_reclamo)
  VALUES (p_id_reclamo, p_nombre_reclamo, p_comentario_reclamo);
  COMMIT;
END;

--P13
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerEmpleadosPorSalarioMinimo AS
  v_id_empleado C##finnk.tab_listado_empleados.id_empleado%TYPE;
  v_nombre_empleado C##finnk.tab_listado_empleados.nombre_empleado%TYPE;
  v_salario_minimo C##finnk.tab_listado_empleados.salario_empleado%TYPE;
BEGIN
  SELECT MIN(salario_empleado) INTO v_salario_minimo FROM C##finnk.tab_listado_empleados;

  FOR emp IN (
      SELECT id_empleado, nombre_empleado
      FROM C##finnk.tab_listado_empleados
      WHERE salario_empleado = v_salario_minimo
  )
  LOOP
    v_id_empleado := emp.id_empleado;
    v_nombre_empleado := emp.nombre_empleado;
    
    DBMS_OUTPUT.PUT_LINE('ID_Empleado: ' || v_id_empleado);
    DBMS_OUTPUT.PUT_LINE('Nombre_Empleado: ' || v_nombre_empleado);
  END LOOP;
END;

--P14
CREATE OR REPLACE PROCEDURE C##finnk.InsertarRestaurante(
  p_id_restaurante IN C##finnk.tab_listado_restaurante.id_restaurante%TYPE,
  p_localidad_restaurante IN C##finnk.tab_listado_restaurante.localidad_restaurante%TYPE,
  p_estado_restaurante IN C##finnk.tab_listado_restaurante.estado_restaurante%TYPE
) AS
BEGIN 
  INSERT INTO C##finnk.tab_listado_restaurante(id_restaurante, localidad_restaurante, estado_restaurante)
  VALUES (p_id_restaurante, p_localidad_restaurante, p_estado_restaurante);
  COMMIT;
END;

--P15
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarExistenciasComida(
    p_id_catalogo IN C##finnk.tab_catalogo_comidas.id_catalogo%TYPE,
    P_existencias_comida IN C##finnk.tab_catalogo_comidas.existencias_comida%TYPE
)AS
BEGIN
    UPDATE C##finnk.tab_catalogo_comidas
    SET existencias_comida = p_existencias_comida
    WHERE id_catalogo = p_id_catalogo;
    COMMIT;
END;

--P16

CREATE OR REPLACE PROCEDURE C##finnk.ObtenerComidasAgotados AS
    --Declaramos una variable de registro para almacenar los resultados
    v_comida C##finnk.tab_catalogo_comidas%ROWTYPE;
BEGIN
    -- utiliza INTO para almacenar los resultados de la consulta en la variable de registro
    SELECT *
    INTO v_comida
    FROM C##finnk.tab_catalogo_comidas
    WHERE existencias_comida = 0;
    
    -- Realizar alguna operación con los resultados, por ejemplo, mostrar los datos en la salida
  DBMS_OUTPUT.PUT_LINE('ID_Catalogo: ' || v_comida.id_catalogo);
  DBMS_OUTPUT.PUT_LINE('Imagen_Comida: ' || v_comida.imagen_comida);
  -- Continúa con las demás columnas según tus necesidades
END;
    
    
--P17
CREATE OR REPLACE PROCEDURE C##finnk.EliminarComida(
    p_id_catalogo IN C##finnk.tab_catalogo_comidas.id_catalogo%TYPE
)AS
BEGIN
    DELETE FROM C##finnk.tab_catalogo_comidas
    WHERE id_catalogo = p_id_catalogo;
    COMMIT;
END;
    

--P18
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerComidaDisponibles AS
BEGIN
  CURSOR c_comidas IS
    SELECT *    FROM C##finnk.tab_catalogo_comidas
    WHERE existencias_comida > 0;
  

  v_id_catalogo C##finnk.tab_catalogo_comidas.id_catalogo%TYPE;
  v_imagen_producto C##finnk.tab_catalogo_productos.imagen_producto%TYPE;

  
   OPEN c_comidas;
  FETCH c_comidas INTO v_id_catalogo, v_imagen_comida, ...;
  
   LOOP
    DBMS_OUTPUT.PUT_LINE('ID_Catalogo: ' || v_id_catalogo);
    DBMS_OUTPUT.PUT_LINE('Imagen_Comida: ' || v_imagen_comida);
    
     FETCH c_comidas INTO v_id_catalogo, v_imagen_comida, ...;
    
      EXIT WHEN c_comidas%NOTFOUND;
  END LOOP;
  
  CLOSE c_comidas;
END;

--P19

CREATE OR REPLACE PROCEDURE C##finnk.ObtenerNumeroComidas(
    p_numero_comidas OUT NUMBER
)AS
BEGIN
    SELECT COUNT (*)
    INTO p_numero_comidas
    FROM C##finnk.tab_catalogo_comidas;
END;
    
    
--P20
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarPrecioComida(
    p_id_catalogo IN C##finnk.tab_catalogo_comidas.id_catalogo%TYPE,
    p_precio_comida IN C##finnk.tab_catalogo_comidas.precio_comida%TYPE
)AS
BEGIN
    UPDATE C##finnk.tab_catalogo_comidas
    SET precio_comida = p_precio_comida
    WHERE id_catalogo = p_id_catalogo;
    COMMIT;
END;

    
    
--P21

CREATE OR REPLACE PROCEDURE C##finnk.ActualizarExistenciasComida(
  p_id_catalogo IN C##finnk.tab_catalogo_comidas.id_catalogo%TYPE,
  p_existencias_comida IN C##finnk.tab_catalogo_comidas.existencias_comida%TYPE
) AS
BEGIN
  UPDATE C##finnk.tab_catalogo_comidas
  SET existencias_comida = p_existencias_comida
  WHERE id_catalogo = p_id_catalogo;
  COMMIT;
END;
    
  
--P22
CREATE OR REPLACE PROCEDURE C##finnk.SeleccionarClientes AS
    TYPE ClientesCursorType IS REF CURSOR;
    clientes_cursor ClientesCursorType;
    v_id_cliente C##finnk.tab_listado_clientes.id_cliente%TYPE;
    v_correo_cliente C##finnk.tab_listado_clientes.correo_cliente%TYPE;
BEGIN
    OPEN clientes_cursor FOR
    SELECT id_cliente, correo_cliente
    FROM C##finnk.tab_listado_clientes;

    LOOP
        FETCH clientes_cursor INTO v_id_cliente, v_correo_cliente;
        EXIT WHEN clientes_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID Cliente: ' || v_id_cliente || ', Correo Cliente: ' || v_correo_cliente);
    END LOOP;

    CLOSE clientes_cursor;
END;

--P23
CREATE OR REPLACE PROCEDURE C##finnk.ContarClientes AS
    v_total_clientes NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_total_clientes
    FROM C##finnk.tab_listado_clientes;

    DBMS_OUTPUT.PUT_LINE('Total de clientes: ' || v_total_clientes);
END;

--P24
CREATE OR REPLACE PROCEDURE C##finnk.SeleccionarRestaurantes AS
    TYPE RestaurantesCursorType IS REF CURSOR;
    restaurantes_cursor RestaurantesCursorType;
    v_id_restaurante C##finnk.tab_listado_restaurante.id_restaurante%TYPE;
    v_localidad_restaurante C##finnk.tab_listado_restaurante.localidad_restaurante%TYPE;
    v_estado_restaurante C##finnk.tab_listado_restaurante.estado_restaurante%TYPE;
BEGIN
    OPEN restaurantes_cursor FOR
    SELECT id_restaurante, localidad_restaurante, estado_restaurante
    FROM C##finnk.tab_listado_restaurante;

    LOOP
        FETCH restaurantes_cursor INTO v_id_restaurante, v_localidad_restaurante, v_estado_restaurante;
        EXIT WHEN restaurantes_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID Restaurante: ' || v_id_restaurante || ', Localidad: ' || v_localidad_restaurante || ', Estado: ' || v_estado_restaurante);
    END LOOP;

    CLOSE restaurantes_cursor;
END;


--P25
CREATE OR REPLACE PROCEDURE C##finnk.ContarRestaurantesActivos AS
    v_total_activos NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_total_activos
    FROM C##finnk.tab_listado_restaurante
    WHERE estado_restaurante = 'Y';

    DBMS_OUTPUT.PUT_LINE('Total de restaurantes activos: ' || v_total_activos);
END;
--10 VISTAS Jose Bravo *****************************************************************************************************************************

--V1
CREATE OR REPLACE VIEW C##finnk.Vista_Cliente AS
SELECT id_cliente || '-' || correo_cliente AS Informacion_Cliente
FROM C##finnk.tab_listado_clientes;

SELECT Informacion_Cliente FROM C##finnk.Vista_cliente;

--V2
--Vista de empleados con salarios iguales o inferiores al promedio de salarios
CREATE OR REPLACE VIEW C##finnk.Vista_Empleados AS
SELECT id_empleado, nombre_empleado, apellidos_empleado, salario_empleado
FROM C##finnk.tab_listado_empleados
WHERE salario_empleado <= (SELECT AVG(salario_empleado) FROM C##finnk.tab_listado_empleados);


SELECT * FROM C##finnk.Vista_Empleados;


--V3
-- Esta vista muestra el nombre, correo y el id del reclamo  del cliente 

CREATE OR REPLACE VIEW C##finnk.Vista_Reclamos AS
SELECT
    c.id_cliente AS ID_Cliente,
    c.correo_cliente AS Correo_Cliente,
    r.comentario_reclamo AS Reclamo
FROM 
    C##finnk.tab_listado_clientes c
JOIN 
    C##finnk.tab_listado_reclamos r ON c.id_cliente = r.fk_reclamos;
    
SELECT * FROM C##finnk.Vista_Reclamos;


--V4
--Mostrar la cantidad total de empleados

CREATE OR REPLACE VIEW C##finnk.Vista_Total_Empleados AS
SELECT COUNT (*) "CANTIDAD DE EMPLEADOS" FROM C##finnk.tab_listado_empleados;

Select * FROM C##finnk.Vista_Total_Empleados;

--V5
--Mostrar la cantidad total de clientes
CREATE OR REPLACE VIEW C##finnk.Vista_Total_Clientes AS
SELECT COUNT (*) "CANTIDAD DE EMPLEADOS" FROM C##finnk.tab_listado_clientes;

Select * FROM C##finnk.Vista_Total_Clientes;

--V6
--Vista para ver el total del salario de todos los empleados 
CREATE OR REPLACE VIEW C##finnk.Vista_Empleados_Salarios AS
SELECT sum(salario_empleado)"TOTAL DE SALARIO" FROM C##finnk.tab_listado_empleados;

SELECT * FROM C##finnk.Vista_Empleados_Salarios;

--V7
--Conteo y agrupamientos de los empleados por puesto

CREATE OR REPLACE VIEW C##finnk.Vista_Empleado_Puesto AS
Select puesto_empleado,
 COUNT (*) AS Conteo_Empleados
FROM
C##finnk.tab_listado_empleados
GROUP BY 
puesto_empleado;

SELECT * FROM C##finnk.Vista_Empleado_Puesto;

--V8
--Mostrar salarios de menor a mayor 
CREATE OR REPLACE VIEW C##finnk.Vista_Salarios_May_Men AS
SELECT * FROM C##finnk.tab_listado_empleados
ORDER BY salario_empleado ASC;

Select * FROM C##finnk.Vista_Salarios_May_Men;

--V9
--Mostrar los empleados que son Costarricenses
CREATE OR REPLACE VIEW C##finnk.Vista_Empleados_Cos AS
SELECT id_empleado, nombre_empleado, nacionalidad_empleado
FROM
 C##finnk.tab_listado_empleados
WHERE
 nacionalidad_empleado = 'Costarricense';
 
SELECT * FROM C##finnk.Vista_Empleados_Cos;


--V10
--Motrar los empleados que tengan estado = true
CREATE OR REPLACE VIEW C##finnk.Vista_Empleados_True AS
SELECT id_empleado, nombre_empleado, estado_empleado
From 
 C##finnk.tab_listado_empleados
WHERE
estado_empleado = 'Y';

SELECT * FROM C##finnk.Vista_Empleados_True;



--15 FUNCIONES Sebastian*****************************************************************************************************************************

--F1
--calcular el salario total que se ocupa pagar por restaurante
create or replace function C##finnk.calcular_salario_total(restaurante_id in number) return number is
total_salario number :=0;
begin
    select sum(salario_empleado)
    into total_salario
    from c##finnk.tab_listado_empleados
    where fk_restaurante = restaurante_id;
    
    return total_salario;

exception
    when NO_DATA_FOUND then
        return  0;   

end;

select * from tab_listado_empleados;

--para correr la funcion
set serveroutput on;
declare
    salario_total number;
begin
    salario_total :=calcular_salario_total(restaurante_id=>1);
    DBMS_OUTPUT.PUT_LINE('Salario total del restaurante: ' || salario_total);
end;



--F2
--funcion para obtener el promedio de ventas diarias por restaurante
create or replace function calcular_promedio_ventas_diarias(p_restaurante_id in number) return number is
    total_ventas number:= 0;
    total_dias number := 0;
    promedio_ventas_diarias number:=0;
begin
    select sum(monto_venta), count(distinct fecha_venta)
    into total_ventas, total_dias
    from c##finnk.tabla_ventas_relacionada
    where restaurante_id = p_restaurante_id;
    
    if total_dias > 0 then
        promedio_ventas_diarias:= total_ventas /total_dias;
    end if;
    return promedio_ventas_diarias;
exception
    when NO_DATA_FOUND then
        return 0;
end;


declare 
    promedio_ventas number;
begin
    promedio_ventas:= calcular_promedio_ventas_diarias(p_restaurante_id => 2);
    DBMS_OUTPUT.PUT_LINE('El promedio diario de ventas es: ' || promedio_ventas);
end;


--F3
--Función para identificar los empleados que superan un cierto salario 
create or replace function empleados_salario_superior(
    restaurante_id in number,
    salario_minimo in number
)return SYS_REFCURSOR as 
    empleados_cursor SYS_REFCURSOR;
begin 
    open empleados_cursor for
        select nombre_empleado, apellidos_empleado, salario_empleado
        from c##finnk.tab_listado_empleados
        where fk_restaurante = restaurante_id
        and salario_empleado>salario_minimo;
        
    return empleados_cursor;
end;

--para correrlo
declare 
    empleados_cursor SYS_REFCURSOR;
    nombre_empleado varchar2(40);
    apellidos_empleado varchar2(40);
    salario_empleado number;
begin
    empleados_cursor := empleados_salario_superior(restaurante_id => 1, salario_minimo => 600000); -- Ejemplo de llamada a la función con restaurante_id y salario_minimo específicos

    loop
        fetch empleados_cursor into nombre_empleado, apellidos_empleado, salario_empleado;
        exit when empleados_cursor%NOTFOUND;
        dbms_output.put_line('Nombre: ' || nombre_empleado || ', Apellidos: ' || apellidos_empleado || ', Salario: ' || salario_empleado);
    end loop;
end;


--F4
--Para obtener numero de reclamos por nombre
create or replace function cant_reclamos_nombre (nombre_reclamo_input in varchar2)
return number is
    total_reclamos number;
begin
    select count(*)
    into total_reclamos
    from c##finnk.tab_listado_reclamos
    where nombre_reclamo = nombre_reclamo_input;
    
    return total_reclamos;
exception
    when NO_DATA_FOUND then
        return 0;
end;

--para correrlo 
declare
    total number;
begin
    total:= cant_reclamos_nombre('Karen');
    DBMS_OUTPUT.PUT_LINE('Total reclamos del empleado: ' ||total);
end;

select * from c##finnk.tab_listado_reclamos;

--F5
--para calcular total de ventas por empleado en un restaurante 
create or replace function total_ventas_por_empleado(
    p_restaurante_id in number,
    p_empleado_id in number
)return number is total_ventas number:=0;
begin
    select sum(monto_venta)
    into total_ventas
    from c##finnk.tabla_ventas_relacionada
    where restaurante_id = p_restaurante_id
    --and fecha_venta between TRUNC(SYSDATE) -30 and TRUNC(SYSDATE) --en los ultimos 30 dias
    and fk_empleado = p_empleado_id;
    
    return total_ventas;
exception
    when NO_DATA_FOUND then
        return 0;
end;

--para correrlo
declare
    total_ventas NUMBER;
begin
    total_ventas := total_ventas_por_empleado(p_restaurante_id => 1, p_empleado_id => 1); -- Ejemplo de llamada a la función con restaurante_id y empleado_id específicos
    DBMS_OUTPUT.PUT_LINE('Total de ventas del empleado en el restaurante: ' || total_ventas);
end;

--F6
--Función para calcular el total de ventas por restaurante
create or replace function total_ventas_por_restaurante(p_restaurante_id in number)
return number is
    total_ventas number :=0;
begin 
    select sum(monto_venta)
    into total_ventas
    from c##finnk.tabla_ventas_relacionada
    where restaurante_id = p_restaurante_id;
    
    return total_ventas;
exception
    when NO_DATA_FOUND then
        return 0;
end;

--para correrlo
declare
    total_ventas NUMBER;
begin
    total_ventas := total_ventas_por_restaurante(1);
    DBMS_OUTPUT.PUT_LINE('Total de ventas para el restaurante: ' || total_ventas);
end;


--F7
--Función para obtener el salario más bajo entre todos los empleados de un restaurante
create or replace function salario_mas_bajo_restaurante(p_restaurante_id in number)
return number is
    salario_minimo number;
begin
    select min(salario_empleado)
    into salario_minimo
    from c##finnk.tab_listado_empleados
    where fk_restaurante = p_restaurante_id;
    
    return salario_minimo;
exception
    when NO_DATA_FOUND then
        return 0;
end;

--para correrlo
declare
    salario_minimo NUMBER;
begin
    salario_minimo := salario_mas_bajo_restaurante(2);
    DBMS_OUTPUT.PUT_LINE('Salario más bajo para el restaurante es: ' || salario_minimo);
end;

--F8
--Función para obtener la cantidad de existencias de un tipo específico de comida en un restaurante
create or replace function obtener_existencias_comida(
    p_id_restaurante in number,
    p_id_comida in number)
return number is 
    v_existencias number;
begin
    select existencias_comida into v_existencias
    from c##finnk.tab_catalogo_comidas
    where id_restaurante = p_id_restaurante and id_catalogo = p_id_comida;
    
    return v_existencias;
exception
    when NO_DATA_FOUND then
        return 0;
   
end;


--para correrlo
declare
    v_existencias NUMBER;
begin
    v_existencias := obtener_existencias_comida(1, 2);
    
    if v_existencias is null then   
        DBMS_OUTPUT.PUT_LINE('No hay existencias de la comida en el dicho restaurante.' );
    else
        DBMS_OUTPUT.PUT_LINE('Existencias de la comida  en el restaurante: ' || v_existencias);
    end if;
end;

select * from c##finnk.tab_catalogo_comidas;

--F9
--Función para encontrar el cliente que más reclamos ha hecho
create or replace function cliente_con_mas_reclamos
return varchar2 is
    cliente_con_mas_reclamos varchar2(50);
begin
    select nombre_cliente
    into cliente_con_mas_reclamos
    from(
        select c.nombre_cliente, count(r.id_reclamos) as total_reclamos
        from c##finnk.tab_listado_clientes c
        join c##finnk.tab_listado_reclamos r on c.id_cliente = r.fk_reclamos
        group by c.nombre_cliente
        order by count(r.id_reclamos) desc
    )
    where ROWNUM = 1;
    return cliente_con_mas_reclamos;
exception
    when NO_DATA_FOUND then
        return 0;
end;

--para correrlo
declare
    cliente_mas_reclamos VARCHAR2(50);
begin
    cliente_mas_reclamos := cliente_con_mas_reclamos();
    DBMS_OUTPUT.PUT_LINE('Cliente con más reclamos: ' || cliente_con_mas_reclamos);
end;


--F10
--Función para encontrar el empleado con más reclamos en un restaurante
create or replace function empleado_mas_reclamos
return varchar2 is
    nombre_empleado_mas_reclamos varchar2(50);
begin
    select e.nombre_empleado || ' ' || e.apellidos_empleado into nombre_empleado_mas_reclamos
    from c##finnk.tab_listado_empleados e
    join c##finnk.tab_listado_reclamos r on e.id_empleado = r.fk_empleado_id
    group by e.nombre_empleado, e.apellidos_empleado
    order by count(r.id_reclamos) desc
    fetch first 1 row only;

    return nombre_empleado_mas_reclamos;

exception
    when NO_DATA_FOUND then
        return 'No se encontraron datos';
end;

--para correrlo
declare
    empleado VARCHAR2(50);
begin
    empleado := empleado_mas_reclamos(); 
    DBMS_OUTPUT.PUT_LINE('Empleado con más reclamos: ' || empleado);
end;

--F11
--Función para encontrar el empleado más reciente contratado en un restaurante
create or replace function empleado_mas_reciente(restaurante_id in number)
return varchar2 is 
    nombre_empleado_reciente varchar2(50);
begin
    select nombre_empleado || ' ' || apellidos_empleado into nombre_empleado_reciente
    from c##finnk.tab_listado_empleados
    where fk_restaurante= restaurante_id
    order by fecha_contratacion desc
    fetch first 1 row only;
    
    return nombre_empleado_reciente;
    
exception
    when NO_DATA_FOUND then
        return 0;
end;

--para correrlo
declare
    empleado_reciente_result VARCHAR2(50);
begin
    empleado_reciente_result := empleado_mas_reciente(1); 
    DBMS_OUTPUT.PUT_LINE('Empleado más reciente: ' || empleado_reciente_result);
end;

select * from c##finnk.tab_listado_empleados;

INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado, fk_restaurante, fecha_contratacion)
  VALUES (9, 'Sebastian', 'alvarado vargas', 'salvaradov@hotmail.com', '87065480', '650400', 'gerente', 'Costarricense', 'Y', 1 ,'19-APR-24');
  
--F12
--Función para calcular el total de ventas en un restaurante en un día específico
create or replace function ventas_restaurante_dia(
    p_restaurante_id in number,
    fecha_venta_in in date
)return number is
    total_ventas_dia number:=0;
begin
    select sum(monto_venta)
    into total_ventas_dia
    from c##finnk.tabla_ventas_relacionada
    where restaurante_id = p_restaurante_id
    and trunc(fecha_venta) = trunc(fecha_venta_in);
    
    return total_ventas_dia;
exception
    when NO_DATA_FOUND then
        return 0;
end;

--para correrlo
declare
    total NUMBER;
begin
    total := ventas_restaurante_dia(1, TO_DATE('2024-04-18', 'YYYY-MM-DD'));
    DBMS_OUTPUT.PUT_LINE('Total de ventas: ' || total);
end;

--F13
--Función para obtener el total de reclamos recibidos en una fecha especifica
create or replace function reclamos_fecha_especifica(fecha_consulta date)
return number is
    total_reclamos number:= 0;
begin
    select count(*)
    into total_reclamos
    from c##finnk.tab_listado_reclamos
    where trunc(fecha_reclamo) = trunc(fecha_consulta);
    
    return total_reclamos;
 exception
    when NO_DATA_FOUND then
        return 0;
end;   


--para correrlo
declare
    total_reclamos NUMBER;
    fecha date := to_date('2024-04-18', 'YYYY-MM-DD');
begin
    total_reclamos := reclamos_fecha_especifica(fecha);
    DBMS_OUTPUT.PUT_LINE('Total de reclamos en la fecha '|| to_char(fecha, 'YYYY-MM-DD') ||': ' || total_reclamos);
end;


--F14
--Función para determinar el restaurante con el menor número de ventas en un dia específico
create or replace function restaurante_menor_ventas(fecha_consulta date)
return varchar2 is 
    nombre_restaurante_con_menor_ventas varchar2(100);
    ventas_minimas number:=999999999;
begin
    for registro in(
        select r.localidad_restaurante, NVL(sum(v.monto_venta),0) as total_ventas
        from c##finnk.tab_listado_restaurante r
        left join c##finnk.tabla_ventas_relacionada v 
        on r.id_restaurante = v.restaurante_id
        and v.fecha_venta = fecha_consulta
        group by r.localidad_restaurante
        
    )loop
        if registro.total_ventas<ventas_minimas then 
            ventas_minimas := registro.total_ventas;
            nombre_restaurante_con_menor_ventas := registro.localidad_restaurante;
        end if;
    end loop;
    return nombre_restaurante_con_menor_ventas;
exception
    when NO_DATA_FOUND then
        return 0;
end;   

--para correrlo
declare
    resultado VARCHAR2(100);
begin
    resultado := restaurante_menor_ventas(TO_DATE('2024-04-18', 'YYYY-MM-DD'));
    DBMS_OUTPUT.PUT_LINE('El restaurante con el menor número de ventas en la fecha dada es: ' || resultado);
end;


--F15
--Función para determinar el promedio de precios de las comidas
create or replace function promedio_precios_por_restaurante(p_restaurante_id in number)
return number is
    promedio_precios number;
begin
    select avg(precio_comida)
    into promedio_precios
    from c##finnk.tab_catalogo_comidas
    where id_restaurante = p_restaurante_id;
    
    return promedio_precios;
exception
    when NO_DATA_FOUND then
        return 0;
end;  


--para correrlo
declare
    promedio NUMBER;
begin
    promedio := promedio_precios_por_restaurante(p_restaurante_id =>1);
    DBMS_OUTPUT.PUT_LINE('El promedio de precios de las comidas para el restaurante es: ' || promedio);
end;

--10 PAQUETES Sebastian*****************************************************************************************************************************

--Paquete1
--gestion de clientes: creacion, actualizacion y eliminar clientes

create or replace package pkg_gestion_clientes as
    procedure InsertarCliente(
        p_id_cliente in tab_listado_clientes.id_cliente%TYPE,
        p_correo_cliente in tab_listado_clientes.correo_cliente%TYPE
    );
    
    procedure actualizar(
        p_id_cliente in tab_listado_clientes.id_cliente%TYPE,
        p_correo_cliente in tab_listado_clientes.correo_cliente%type
    );

    procedure eliminar(
        p_id_cliente in tab_listado_clientes.id_cliente%type
    );
end pkg_gestion_clientes;

create or replace package body pkg_gestion_clientes as
    procedure InsertarCliente(
        p_id_cliente in tab_listado_clientes.id_cliente%TYPE,
        p_correo_cliente in tab_listado_clientes.correo_cliente%TYPE
    ) is
    begin
        insert into tab_listado_clientes (id_cliente, correo_cliente)
        values (p_id_cliente, p_correo_cliente);
    end InsertarCliente;
    
    procedure actualizar(
        p_id_cliente in tab_listado_clientes.id_cliente%TYPE,
        p_correo_cliente in tab_listado_clientes.correo_cliente%TYPE
    ) is
    begin
        update tab_listado_clientes
        set correo_cliente = p_correo_cliente
        where id_cliente = p_id_cliente;
    end actualizar;

    procedure eliminar(
        p_id_cliente in tab_listado_clientes.id_cliente%TYPE
    ) is
    begin
        delete from tab_listado_clientes
        where id_cliente = p_id_cliente;
    end eliminar;
end pkg_gestion_clientes;



--Paquete 2
--gestion comidas
create or replace package c##finnk.pkg_gestion_comidas as

    procedure actualizarExistenciasComida(
        p_id_catalogo IN C##finnk.tab_catalogo_comidas.id_catalogo%TYPE,
        p_existencias_comida IN C##finnk.tab_catalogo_comidas.existencias_comida%TYPE
    );
    
    procedure ObtenerComidasAgotadas;
    
    procedure ObtenerComidaDisponibles;
end pkg_gestion_comidas;

create or replace package body c##finnk.pkg_gestion_comidas as

    procedure actualizarExistenciasComida(
        p_id_catalogo in c##finnk.tab_catalogo_comidas.id_catalogo%type,
        p_existencias_comida in c##finnk.tab_catalogo_comidas.existencias_comida%type
    ) is
    begin
        update c##finnk.tab_catalogo_comidas
        set existencias_comida = p_existencias_comida
        where id_catalogo = p_id_catalogo;
        commit;
    end actualizarExistenciasComida;
    
    procedure obtenerComidasAgotadas is
        v_comida c##finnk.tab_catalogo_comidas%rowtype;
    begin
        select *
        into v_comida
        from c##finnk.tab_catalogo_comidas
        where existencias_comida = 0;
        
        dbms_output.put_line('ID_Catalogo: ' || v_comida.id_catalogo);
        dbms_output.put_line('Imagen_Comida: ' || v_comida.imagen_comida);
       
    end obtenerComidasAgotadas;
    
    procedure obtenerComidaDisponibles is
        cursor c_comidas is
            select id_catalogo, imagen_comida
            from c##finnk.tab_catalogo_comidas
            where existencias_comida > 0;
        
        v_id_catalogo c##finnk.tab_catalogo_comidas.id_catalogo%type;
        v_imagen_comida c##finnk.tab_catalogo_comidas.imagen_comida%type;
    begin
        open c_comidas;
        loop
            fetch c_comidas into v_id_catalogo, v_imagen_comida;
            exit when c_comidas%notfound;
            
            dbms_output.put_line('ID_Catalogo: ' || v_id_catalogo);
            dbms_output.put_line('Imagen_Comida: ' || v_imagen_comida);
        end loop;
        close c_comidas;
    end obtenerComidaDisponibles;
end pkg_gestion_comidas;

--Paquete 3
--Paquete de Procedimientos de Contar
create or replace package c##finnk.pkg_contar as

    procedure contarClientes;
    
    procedure contarRestaurantesActivos;
end pkg_contar;

create or replace package body c##finnk.pkg_contar as

    procedure contarclientes is
        v_total_clientes number;
    begin
        select count(*) into v_total_clientes
        from c##finnk.tab_listado_clientes;

        dbms_output.put_line('Total de clientes: ' || v_total_clientes);
    end contarclientes;

    procedure contarrestaurantesactivos is
        v_total_activos number;
    begin
        select count(*) into v_total_activos
        from c##finnk.tab_listado_restaurante
        where estado_restaurante = 'Y';

        dbms_output.put_line('Total de restaurantes activos: ' || v_total_activos);
    end contarrestaurantesactivos;

end pkg_contar;

--Paquete 4
--paquete procedimientos de seleccionar

create or replace package c##finnk.pkg_seleccion_datos as
    procedure seleccionarRestaurantes;
    
    procedure seleccionarClientes;
end pkg_seleccion_datos;

create or replace package body c##finnk.pkg_seleccion_datos as

    procedure seleccionarrestaurantes is
        type restaurantescursortype is ref cursor;
        restaurantes_cursor restaurantescursortype;
        v_id_restaurante c##finnk.tab_listado_restaurante.id_restaurante%type;
        v_localidad_restaurante c##finnk.tab_listado_restaurante.localidad_restaurante%type;
        v_estado_restaurante c##finnk.tab_listado_restaurante.estado_restaurante%type;
    begin
        open restaurantes_cursor for
        select id_restaurante, localidad_restaurante, estado_restaurante
        from c##finnk.tab_listado_restaurante;

        loop
            fetch restaurantes_cursor into v_id_restaurante, v_localidad_restaurante, v_estado_restaurante;
            exit when restaurantes_cursor%notfound;
            dbms_output.put_line('id restaurante: ' || v_id_restaurante || ', localidad: ' || v_localidad_restaurante || ', estado: ' || v_estado_restaurante);
        end loop;

        close restaurantes_cursor;
    end seleccionarrestaurantes;

    procedure seleccionarclientes is
        type clientesCursorType is ref cursor;
        clientes_cursor clientesCursorType;
        v_id_cliente c##finnk.tab_listado_clientes.id_cliente%type;
        v_correo_cliente c##finnk.tab_listado_clientes.correo_cliente%type;
    begin
        open clientes_cursor for
        select id_cliente, correo_cliente
        from c##finnk.tab_listado_clientes;

        loop
            fetch clientes_cursor into v_id_cliente, v_correo_cliente;
            exit when clientes_cursor%notfound;
            dbms_output.put_line('id cliente: ' || v_id_cliente || ', correo cliente: ' || v_correo_cliente);
        end loop;

        close clientes_cursor;
    end seleccionarclientes;

end pkg_seleccion_datos;


--Paquete 5
--Paquete procedimientos eliminar

create or replace package c##finnk.pkg_eliminar as
    procedure kEliminarReclamo(
        p_id_reclamo in c##finnk.tab_listado_reclamos.id_reclamos%type
    );
    procedure eliminarComida(
        p_id_catalogo in c##finnk.tab_catalogo_comidas.id_catalogo%type
    );
end pkg_eliminar;    

create or replace package body c##finnk.pkg_eliminar as

    procedure keliminarreclamo(
        p_id_reclamo in c##finnk.tab_listado_reclamos.id_reclamos%type
    ) as
    begin
        delete from c##finnk.tab_listado_reclamos
        where id_reclamos = p_id_reclamo;
        commit;
    end keliminarreclamo;

    procedure eliminarcomida(
        p_id_catalogo in c##finnk.tab_catalogo_comidas.id_catalogo%type
    ) as
    begin
        delete from c##finnk.tab_catalogo_comidas
        where id_catalogo = p_id_catalogo;
        commit;
    end eliminarcomida;

end pkg_eliminar;

--Paquete 6
--paquete funciones obtener
create or replace package c##finnk.pkg_obtener_datos as
    procedure obtenernumerorestaurantesporlocalidad(
        p_localidad_restaurante in c##finnk.tab_listado_restaurante.localidad_restaurante%type,
        p_numero_restaurantes out number
    );

    procedure obtenerempleadosporrestaurante(
        p_id_restaurante in c##finnk.tab_listado_restaurante.id_restaurante%type
    );

    procedure obtenertotalreclamos(
        p_total_reclamos out number
    );

    procedure obtenernumeroempleadosportienda(
        p_id_restaurante in c##finnk.tab_listado_restaurante.id_restaurante%type,
        p_numero_empleados out number
    );

    procedure obtenerclientesporcorreo(
        p_correo_cliente in varchar2
    );
end pkg_obtener_datos;

create or replace package body c##finnk.pkg_obtener_datos as

    procedure obtenernumerorestaurantesporlocalidad(
        p_localidad_restaurante in c##finnk.tab_listado_restaurante.localidad_restaurante%type,
        p_numero_restaurantes out number
    ) as
    begin
        select count(*)
        into p_numero_restaurantes
        from c##finnk.tab_listado_restaurante
        where localidad_restaurante = p_localidad_restaurante;
    end obtenernumerorestaurantesporlocalidad;

    procedure obtenerempleadosporrestaurante(
        p_id_restaurante in c##finnk.tab_listado_restaurante.id_restaurante%type
    ) as
    begin
        for r in (select *
                  from c##finnk.tab_listado_empleados
                  where fk_restaurante = p_id_restaurante) loop
            dbms_output.put_line('empleado: ' || r.nombre_empleado || ', id: ' || r.id_empleado);
        end loop;
    end obtenerempleadosporrestaurante;

    procedure obtenertotalreclamos(
        p_total_reclamos out number
    ) as
    begin
        select count(*)
        into p_total_reclamos
        from c##finnk.tab_listado_reclamos;
    end obtenertotalreclamos;

    procedure obtenernumeroempleadosportienda(
        p_id_restaurante in c##finnk.tab_listado_restaurante.id_restaurante%type,
        p_numero_empleados out number
    ) as
    begin
        select count(*)
        into p_numero_empleados
        from c##finnk.tab_listado_empleados
        where fk_restaurante = p_id_restaurante;
    end obtenernumeroempleadosportienda;

    procedure obtenerclientesporcorreo(
        p_correo_cliente in varchar2
    ) as
        v_cliente c##finnk.tab_listado_clientes%rowtype;
    begin
        select *
        into v_cliente
        from c##finnk.tab_listado_clientes
        where correo_cliente = p_correo_cliente;
        
        dbms_output.put_line('id_cliente: ' || v_cliente.id_cliente || ', correo_cliente: ' || v_cliente.correo_cliente);    
    end obtenerclientesporcorreo;

end pkg_obtener_datos;

--Paquete 7
--Paquete actualizar datos
create or replace package c##finnk.pkg_actualizar_datos as
    procedure actualizarSalarioEmpleado(
        p_id_empleado in c##finnk.tab_listado_empleados.id_empleado%type,
        p_salario_empleado in c##finnk.tab_listado_empleados.salario_empleado%type
    );

    procedure actualizarNombreEmpleado(
        p_id_empleado in c##finnk.tab_listado_empleados.id_empleado%type,
        p_nombre_empleado in c##finnk.tab_listado_empleados.nombre_empleado%type
    );

    procedure actualizarPrecioComida(
        p_id_catalogo in c##finnk.tab_catalogo_comidas.id_catalogo%type,
        p_precio_comida in c##finnk.tab_catalogo_comidas.precio_comida%type
    );

    procedure actualizarExistenciasComida(
        p_id_catalogo in c##finnk.tab_catalogo_comidas.id_catalogo%type,
        p_existencias_comida in c##finnk.tab_catalogo_comidas.existencias_comida%type
    );
end pkg_actualizar_datos;

create or replace package body c##finnk.pkg_actualizar_datos as
    procedure actualizarSalarioEmpleado(
        p_id_empleado in c##finnk.tab_listado_empleados.id_empleado%type,
        p_salario_empleado in c##finnk.tab_listado_empleados.salario_empleado%type
    ) as
    begin
        update c##finnk.tab_listado_empleados
        set salario_empleado = p_salario_empleado
        where id_empleado = p_id_empleado;
        commit;
    end actualizarSalarioEmpleado;

    procedure actualizarNombreEmpleado(
        p_id_empleado in c##finnk.tab_listado_empleados.id_empleado%type,
        p_nombre_empleado in c##finnk.tab_listado_empleados.nombre_empleado%type
    ) as
    begin
        update c##finnk.tab_listado_empleados
        set nombre_empleado = p_nombre_empleado
        where id_empleado = p_id_empleado;
        commit;
    end actualizarNombreEmpleado;

    procedure actualizarPrecioComida(
        p_id_catalogo in c##finnk.tab_catalogo_comidas.id_catalogo%type,
        p_precio_comida in c##finnk.tab_catalogo_comidas.precio_comida%type
    ) as
    begin
        update c##finnk.tab_catalogo_comidas
        set precio_comida = p_precio_comida
        where id_catalogo = p_id_catalogo;
        commit;
    end actualizarPrecioComida;

    procedure actualizarExistenciasComida(
        p_id_catalogo in c##finnk.tab_catalogo_comidas.id_catalogo%type,
        p_existencias_comida in c##finnk.tab_catalogo_comidas.existencias_comida%type
    ) as
    begin
        update c##finnk.tab_catalogo_comidas
        set existencias_comida = p_existencias_comida
        where id_catalogo = p_id_catalogo;
        commit;
    end actualizarExistenciasComida;

end pkg_actualizar_datos;

--Paquete 8
--Paquete gestion de reclamos

create or replace package c##finnk.pkg_gestion_reclamos as
    procedure keliminarreclamo(
        p_id_reclamo in c##finnk.tab_listado_reclamos.id_reclamos%type
    );
    procedure obtenertotalreclamos(
        p_total_reclamos out number
    );
    procedure insertarreclamo(
        p_id_reclamo in c##finnk.tab_listado_reclamos.id_reclamos%type,
        p_nombre_reclamo in c##finnk.tab_listado_reclamos.nombre_reclamo%type,
        p_comentario_reclamo in c##finnk.tab_listado_reclamos.comentario_reclamo%type
    );
end pkg_gestion_reclamos;

create or replace package body c##finnk.pkg_gestion_reclamos as
    procedure keliminarreclamo(
        p_id_reclamo in c##finnk.tab_listado_reclamos.id_reclamos%type
    ) as
    begin
        delete from c##finnk.tab_listado_reclamos
        where id_reclamos = p_id_reclamo;
        commit;
    end keliminarreclamo;

    procedure obtenertotalreclamos(
        p_total_reclamos out number
    ) as
    begin
        select count(*)
        into p_total_reclamos
        from c##finnk.tab_listado_reclamos;
    end obtenertotalreclamos;

    procedure insertarreclamo(
        p_id_reclamo in c##finnk.tab_listado_reclamos.id_reclamos%type,
        p_nombre_reclamo in c##finnk.tab_listado_reclamos.nombre_reclamo%type,
        p_comentario_reclamo in c##finnk.tab_listado_reclamos.comentario_reclamo%type
    ) as
    begin
        insert into c##finnk.tab_listado_reclamos(id_reclamos, nombre_reclamo, comentario_reclamo)
        values (p_id_reclamo, p_nombre_reclamo, p_comentario_reclamo);
        commit;
    end insertarreclamo;
end pkg_gestion_reclamos;

--Paquete 9
--Paquete gestion empleados

create or replace package c##finnk.pkg_gestion_empleados as
    procedure obtenerempleadosporrestaurante(
        p_id_restaurante in c##finnk.tab_listado_restaurante.id_restaurante%type
    );
  
    procedure actualizarsalarioempleado(
        p_id_empleado in c##finnk.tab_listado_empleados.id_empleado%type,
        p_salario_empleado in c##finnk.tab_listado_empleados.salario_empleado%type   
    );

    procedure obtenerempleadosporsalariomaximo;

    procedure obtenerempleadosporsalariominimo;

    procedure actualizarnombreempleado(
        p_id_empleado in c##finnk.tab_listado_empleados.id_empleado%type,
        p_nombre_empleado in c##finnk.tab_listado_empleados.nombre_empleado%type
    );

    procedure obtenernumeroempleadosportienda(
        p_id_restaurante in c##finnk.tab_listado_restaurante.id_restaurante%type,
        p_numero_empleados out number
    );
end pkg_gestion_empleados;

create or replace package body c##finnk.pkg_gestion_empleados as

    procedure obtenerempleadosporrestaurante(
        p_id_restaurante in c##finnk.tab_listado_restaurante.id_restaurante%type
    ) as
    begin
        for emp in (
        select *
        from c##finnk.tab_listado_empleados
        where fk_restaurante = p_id_restaurante
        ) loop
        dbms_output.put_line('id_empleado: ' || emp.id_empleado);
        dbms_output.put_line('nombre_empleado: ' || emp.nombre_empleado);
        end loop;
    end obtenerempleadosporrestaurante;

    procedure actualizarsalarioempleado(
        p_id_empleado in c##finnk.tab_listado_empleados.id_empleado%type,
        p_salario_empleado in c##finnk.tab_listado_empleados.salario_empleado%type   
    ) as
    begin
        update c##finnk.tab_listado_empleados
        set salario_empleado = p_salario_empleado
        where id_empleado = p_id_empleado;
        commit;
    end actualizarsalarioempleado;

    procedure obtenerempleadosporsalariomaximo as
        v_id_empleado c##finnk.tab_listado_empleados.id_empleado%type;
        v_nombre_empleado c##finnk.tab_listado_empleados.nombre_empleado%type;
    begin
        declare
        v_salario_maximo c##finnk.tab_listado_empleados.salario_empleado%type;
        begin
        select max(salario_empleado) into v_salario_maximo from c##finnk.tab_listado_empleados;
      
        for emp in (select *
                  from c##finnk.tab_listado_empleados
                  where salario_empleado = v_salario_maximo)
        loop
            v_id_empleado := emp.id_empleado;
            v_nombre_empleado := emp.nombre_empleado;
        
            dbms_output.put_line('id_empleado: ' || v_id_empleado);
            dbms_output.put_line('nombre_empleado: ' || v_nombre_empleado);
        end loop;
        end;
    end obtenerempleadosporsalariomaximo;

    procedure obtenerempleadosporsalariominimo as
        v_id_empleado c##finnk.tab_listado_empleados.id_empleado%type;
        v_nombre_empleado c##finnk.tab_listado_empleados.nombre_empleado%type;
    begin
        declare
        v_salario_minimo c##finnk.tab_listado_empleados.salario_empleado%type;
        begin
        select min(salario_empleado) into v_salario_minimo from c##finnk.tab_listado_empleados;
      
        for emp in (select *
                    from c##finnk.tab_listado_empleados
                    where salario_empleado = v_salario_minimo)
        loop
            v_id_empleado := emp.id_empleado;
            v_nombre_empleado := emp.nombre_empleado;
        
            dbms_output.put_line('id_empleado: ' || v_id_empleado);
            dbms_output.put_line('nombre_empleado: ' || v_nombre_empleado);
        end loop;
        end;
    end obtenerempleadosporsalariominimo;

    procedure actualizarnombreempleado(
        p_id_empleado in c##finnk.tab_listado_empleados.id_empleado%type,
        p_nombre_empleado in c##finnk.tab_listado_empleados.nombre_empleado%type
    ) as
    begin
        update c##finnk.tab_listado_empleados
        set nombre_empleado = p_nombre_empleado
        where id_empleado = p_id_empleado;
        commit;    
    end actualizarnombreempleado;

    procedure obtenernumeroempleadosportienda(
        p_id_restaurante in c##finnk.tab_listado_restaurante.id_restaurante%type,
        p_numero_empleados out number
    ) as
    begin
        select count(*)
        into p_numero_empleados
        from c##finnk.tab_listado_empleados
        where fk_restaurante = p_id_restaurante;
    end obtenernumeroempleadosportienda;
end pkg_gestion_empleados;

--Paquete 10
--gestion de restaurantes y localidades
create or replace package c##finnk.pkg_gestion_restaurantes_localidades as
  
  procedure obtenerrrestaurantesporlocalidad(
        p_localidad_restaurante in c##finnk.tab_listado_restaurante.localidad_restaurante%type,
        p_numero_restaurantes out number
    );

    procedure insertarrestaurante(
        p_id_restaurante in c##finnk.tab_listado_restaurante.id_restaurante%type,
        p_localidad_restaurante in c##finnk.tab_listado_restaurante.localidad_restaurante%type,
        p_estado_restaurante in c##finnk.tab_listado_restaurante.estado_restaurante%type
    );

    procedure seleccionarrestaurantes;
end pkg_gestion_restaurantes_localidades;

create or replace package body c##finnk.pkg_gestion_restaurantes_localidades as
    procedure obtenerrrestaurantesporlocalidad(
        p_localidad_restaurante in c##finnk.tab_listado_restaurante.localidad_restaurante%type,
        p_numero_restaurantes out number
    ) as
    begin
        select count(*)
        into p_numero_restaurantes
        from c##finnk.tab_listado_restaurante
        where localidad_restaurante = p_localidad_restaurante;
    end obtenerrrestaurantesporlocalidad;

    procedure insertarrestaurante(
        p_id_restaurante in c##finnk.tab_listado_restaurante.id_restaurante%type,
        p_localidad_restaurante in c##finnk.tab_listado_restaurante.localidad_restaurante%type,
        p_estado_restaurante in c##finnk.tab_listado_restaurante.estado_restaurante%type
    ) as
    begin
        insert into c##finnk.tab_listado_restaurante(id_restaurante, localidad_restaurante, estado_restaurante)
        values (p_id_restaurante, p_localidad_restaurante, p_estado_restaurante);
        commit;
    end insertarrestaurante;

    procedure seleccionarrestaurantes as
        cursor c_restaurantes is
        select id_restaurante, localidad_restaurante, estado_restaurante
        from c##finnk.tab_listado_restaurante;
      
        v_id_restaurante c##finnk.tab_listado_restaurante.id_restaurante%type;
        v_localidad_restaurante c##finnk.tab_listado_restaurante.localidad_restaurante%type;
        v_estado_restaurante c##finnk.tab_listado_restaurante.estado_restaurante%type;
    begin
        open c_restaurantes;
        loop
        fetch c_restaurantes into v_id_restaurante, v_localidad_restaurante, v_estado_restaurante;
        exit when c_restaurantes%notfound;
        dbms_output.put_line('ID Restaurante: ' || v_id_restaurante || ', Localidad: ' || v_localidad_restaurante || ', Estado: ' || v_estado_restaurante);
        end loop;
        close c_restaurantes;
    end seleccionarrestaurantes;
end pkg_gestion_restaurantes_localidades;


--5 TRIGGERS*****************************************************************************************************************************

--T1
-- Este trigger lo que hace es que se dispara cada vez que se hace un insert, update o un delete de la tabla tab_listado_clientes para auditarlo}
--DROP TRIGGER trg_audit_clientes;
CREATE OR REPLACE TRIGGER trg_audit_clientes
AFTER INSERT OR UPDATE OR DELETE ON C##finnk.tab_listado_clientes
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
BEGIN
    IF INSERTING THEN
        v_operation := 'INSERT';
    ELSIF UPDATING THEN
        v_operation := 'UPDATE';
    ELSIF DELETING THEN
        v_operation := 'DELETE';
    END IF;

    INSERT INTO audit_tab_listado_clientes (id_cliente, operation_type, operation_time)
    VALUES (:NEW.id_cliente, v_operation, SYSTIMESTAMP);
END;

--T2
--Calcula el total de ventas cada vez quye se ingresa una nueva
--DROP TRIGGER trg_actualizar_total_ventas;
CREATE OR REPLACE TRIGGER trg_actualizar_total_ventas
AFTER INSERT ON tabla_ventas_relacionada
FOR EACH ROW
DECLARE
    v_restaurante_id NUMBER;
BEGIN
    v_restaurante_id := :NEW.restaurante_id;
    UPDATE tab_listado_restaurante
    SET total_ventas = total_ventas + :NEW.monto_venta
    WHERE id_restaurante = v_restaurante_id;
END;
/

--T3
--Llevar el control de los reclamos cada vez que se modifique
--DROP TRIGGER trg_registro_cambios_reclamos;
CREATE OR REPLACE TRIGGER trg_registro_cambios_reclamos
AFTER INSERT OR UPDATE OR DELETE ON tab_listado_reclamos
FOR EACH ROW
DECLARE
    v_operation VARCHAR2(10);
BEGIN
    IF INSERTING THEN
        v_operation := 'INSERT';
    ELSIF UPDATING THEN
        v_operation := 'UPDATE';
    ELSIF DELETING THEN
        v_operation := 'DELETE';
    END IF;

    INSERT INTO registro_cambios_reclamos (id_reclamo, operacion, fecha)
    VALUES (:NEW.id_reclamos, v_operation, SYSDATE);
END;
/

--T4
--Verifica si el salario de los empleados estan dentro de lo "normal" de la empresa, agregando un rango de ?450,000 a ?550,000
CREATE OR REPLACE TRIGGER trg_validar_salario_empleado
BEFORE INSERT OR UPDATE ON tab_listado_empleados
FOR EACH ROW
DECLARE
    v_salario_minimo NUMBER := 450000; 
    v_salario_maximo NUMBER := 550000; 
BEGIN
    IF :NEW.salario_empleado < v_salario_minimo OR :NEW.salario_empleado > v_salario_maximo THEN
        RAISE_APPLICATION_ERROR(-20001, 'El salario debe estar dentro del rango de ' || v_salario_minimo || ' a ' || v_salario_maximo);
    END IF;
END;
/

--T5
--Si el restaurante cambia de estado a "cerrado" verifica si hay empleados activos antes de cambiar a ese estado
CREATE OR REPLACE TRIGGER trg_verificar_empleados_activos
BEFORE UPDATE OF estado_restaurante ON tab_listado_restaurante
FOR EACH ROW
DECLARE
    v_numero_empleados NUMBER;
BEGIN
    IF :NEW.estado_restaurante = 'N' THEN
        SELECT COUNT(*) INTO v_numero_empleados
        FROM tab_listado_empleados
        WHERE fk_restaurante = :NEW.id_restaurante AND estado_empleado = 'Y';
        
        IF v_numero_empleados > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'No se puede cerrar el restaurante debido a que tiene empleados activos.');
        END IF;
    END IF;
END;
/

--15 CURSORES*****************************************************************************************************************************

--C1
-- Cursor para obtener todos los clientes
DECLARE
  CURSOR clientes_cursor IS
    SELECT * FROM C##finnk.tab_listado_clientes;
BEGIN
  NULL;
END;

--C2
-- Cursor para obtener todos los restaurantes
DECLARE
  CURSOR restaurantes_cursor IS
    SELECT * FROM C##finnk.tab_listado_restaurante;
BEGIN
  NULL;
END;

--C3
-- Cursor para obtener todos los empleados
DECLARE
  CURSOR empleados_cursor IS
    SELECT * FROM C##finnk.tab_listado_empleados;
BEGIN
  NULL;
END;

--C4
-- Cursor para obtener todos los reclamos
DECLARE
  CURSOR reclamos_cursor IS
    SELECT * FROM C##finnk.tab_listado_reclamos;
BEGIN
  NULL;
END;


--C5
-- Cursor para obtener todos los registros de comidas
DECLARE
  CURSOR comidas_cursor IS
    SELECT * FROM C##finnk.tab_catalogo_comidas;
BEGIN
  NULL;
END;


--C6
-- Cursor para obtener todos los registros de comidas DISPONIBLES


DECLARE
  CURSOR comida_disponible_cursor IS
    SELECT id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida
    FROM C##finnk.tab_catalogo_comidas
    WHERE existencias_comida > 0 AND estado_comida = 'Y';
    
  v_id_catalogo C##finnk.tab_catalogo_comidas.id_catalogo%TYPE;
  v_imagen_comida C##finnk.tab_catalogo_comidas.imagen_comida%TYPE;
  v_nombre_comida C##finnk.tab_catalogo_comidas.nombre_comida%TYPE;
  v_precio_comida C##finnk.tab_catalogo_comidas.precio_comida%TYPE;
  v_existencias_comida C##finnk.tab_catalogo_comidas.existencias_comida%TYPE;
  v_estado_comida C##finnk.tab_catalogo_comidas.estado_comida%TYPE;
BEGIN
  OPEN comida_disponible_cursor;
  
  LOOP
    FETCH comida_disponible_cursor INTO v_id_catalogo, v_imagen_comida, v_nombre_comida, v_precio_comida, v_existencias_comida, v_estado_comida;
    EXIT WHEN comida_disponible_cursor%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('ID: ' || v_id_catalogo || ', Nombre: ' || v_nombre_comida || ', Precio: ' || v_precio_comida || ', Existencias: ' || v_existencias_comida);
  END LOOP;
  
  CLOSE comida_disponible_cursor;
END;


--C7
-- Cursor para obtener todos los restaurantes DISPONIBLES
DECLARE
  CURSOR restaurantes_disponibles_cursor IS
    SELECT id_restaurante, localidad_restaurante, estado_restaurante
    FROM C##finnk.tab_listado_restaurante
    WHERE estado_restaurante = 'Y';
    
  -- Variables para almacenar los datos del cursor
  v_id_restaurante C##finnk.tab_listado_restaurante.id_restaurante%TYPE;
  v_localidad_restaurante C##finnk.tab_listado_restaurante.localidad_restaurante%TYPE;
  v_estado_restaurante C##finnk.tab_listado_restaurante.estado_restaurante%TYPE;
BEGIN
  OPEN restaurantes_disponibles_cursor;
  
  LOOP
    FETCH restaurantes_disponibles_cursor INTO v_id_restaurante, v_localidad_restaurante, v_estado_restaurante;
    
    EXIT WHEN restaurantes_disponibles_cursor%NOTFOUND;
    
    -- Mostrar los datos de los restaurantes disponibles
    DBMS_OUTPUT.PUT_LINE('ID Restaurante: ' || v_id_restaurante || ', Localidad: ' || v_localidad_restaurante || ', Estado: ' || v_estado_restaurante);
  END LOOP;
  
  CLOSE restaurantes_disponibles_cursor;
END;

--C8
-- Cursor para obtener todos los empleados DISPONIBLES
DECLARE
  CURSOR empleados_disponibles_cursor IS
    SELECT id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado, fk_restaurante
    FROM C##finnk.tab_listado_empleados
    WHERE estado_empleado = 'Y';
    
  -- Variables para almacenar los datos del cursor
  v_id_empleado C##finnk.tab_listado_empleados.id_empleado%TYPE;
  v_nombre_empleado C##finnk.tab_listado_empleados.nombre_empleado%TYPE;
  v_apellidos_empleado C##finnk.tab_listado_empleados.apellidos_empleado%TYPE;
  v_correo_empleado C##finnk.tab_listado_empleados.correo_empleado%TYPE;
  v_telefono_empleado C##finnk.tab_listado_empleados.telefono_empleado%TYPE;
  v_salario_empleado C##finnk.tab_listado_empleados.salario_empleado%TYPE;
  v_puesto_empleado C##finnk.tab_listado_empleados.puesto_empleado%TYPE;
  v_nacionalidad_empleado C##finnk.tab_listado_empleados.nacionalidad_empleado%TYPE;
  v_estado_empleado C##finnk.tab_listado_empleados.estado_empleado%TYPE;
  v_fk_restaurante C##finnk.tab_listado_empleados.fk_restaurante%TYPE;
BEGIN
  OPEN empleados_disponibles_cursor;
  
  LOOP
    FETCH empleados_disponibles_cursor INTO v_id_empleado, v_nombre_empleado, v_apellidos_empleado, v_correo_empleado, v_telefono_empleado, v_salario_empleado, v_puesto_empleado, v_nacionalidad_empleado, v_estado_empleado, v_fk_restaurante;
    
    EXIT WHEN empleados_disponibles_cursor%NOTFOUND;
    
    -- Mostrar los datos de los empleados disponibles
    DBMS_OUTPUT.PUT_LINE('ID Empleado: ' || v_id_empleado || ', Nombre: ' || v_nombre_empleado || ' ' || v_apellidos_empleado || ', Correo: ' || v_correo_empleado || ', Tel?fono: ' || v_telefono_empleado || ', Salario: ' || v_salario_empleado || ', Puesto: ' || v_puesto_empleado || ', Nacionalidad: ' || v_nacionalidad_empleado || ', Estado: ' || v_estado_empleado || ', Restaurante: ' || v_fk_restaurante);
  END LOOP;
  
  CLOSE empleados_disponibles_cursor;
END;

--C9
-- Cursor para obtener todos los registros de comidas NO disponibles
DECLARE
  CURSOR comida_disponible_cursor IS
    SELECT id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida
    FROM C##finnk.tab_catalogo_comidas
    WHERE existencias_comida = 0 AND estado_comida = 'N';
    
  -- Variables para almacenar los datos del cursor
  v_id_catalogo C##finnk.tab_catalogo_comidas.id_catalogo%TYPE;
  v_imagen_comida C##finnk.tab_catalogo_comidas.imagen_comida%TYPE;
  v_nombre_comida C##finnk.tab_catalogo_comidas.nombre_comida%TYPE;
  v_precio_comida C##finnk.tab_catalogo_comidas.precio_comida%TYPE;
  v_existencias_comida C##finnk.tab_catalogo_comidas.existencias_comida%TYPE;
  v_estado_comida C##finnk.tab_catalogo_comidas.estado_comida%TYPE;
BEGIN
  OPEN comida_disponible_cursor;
  
  LOOP
    FETCH comida_disponible_cursor INTO v_id_catalogo, v_imagen_comida, v_nombre_comida, v_precio_comida, v_existencias_comida, v_estado_comida;
    
    EXIT WHEN comida_disponible_cursor%NOTFOUND;
    
    -- Mostrar los datos directamente
    DBMS_OUTPUT.PUT_LINE('ID: ' || v_id_catalogo || ', Nombre: ' || v_nombre_comida || ', Precio: ' || v_precio_comida || ', Existencias: ' || v_existencias_comida);
  END LOOP;
  
  CLOSE comida_disponible_cursor;
END;

--C10
-- Cursor para obtener todos los restaurantes NO disponibles
DECLARE
  CURSOR restaurantes_disponibles_cursor IS
    SELECT id_restaurante, localidad_restaurante, estado_restaurante
    FROM C##finnk.tab_listado_restaurante
    WHERE estado_restaurante = 'N';
    
  -- Variables para almacenar los datos del cursor
  v_id_restaurante C##finnk.tab_listado_restaurante.id_restaurante%TYPE;
  v_localidad_restaurante C##finnk.tab_listado_restaurante.localidad_restaurante%TYPE;
  v_estado_restaurante C##finnk.tab_listado_restaurante.estado_restaurante%TYPE;
BEGIN
  OPEN restaurantes_disponibles_cursor;
  
  LOOP
    FETCH restaurantes_disponibles_cursor INTO v_id_restaurante, v_localidad_restaurante, v_estado_restaurante;
    
    EXIT WHEN restaurantes_disponibles_cursor%NOTFOUND;
    
    -- Mostrar los datos de los restaurantes disponibles
    DBMS_OUTPUT.PUT_LINE('ID Restaurante: ' || v_id_restaurante || ', Localidad: ' || v_localidad_restaurante || ', Estado: ' || v_estado_restaurante);
  END LOOP;
  
  CLOSE restaurantes_disponibles_cursor;
END;

--C11
-- Cursor para obtener todos los empleados NO disponibles
DECLARE
  CURSOR empleados_disponibles_cursor IS
    SELECT id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado, fk_restaurante
    FROM C##finnk.tab_listado_empleados
    WHERE estado_empleado = 'N';
    
  -- Variables para almacenar los datos del cursor
  v_id_empleado C##finnk.tab_listado_empleados.id_empleado%TYPE;
  v_nombre_empleado C##finnk.tab_listado_empleados.nombre_empleado%TYPE;
  v_apellidos_empleado C##finnk.tab_listado_empleados.apellidos_empleado%TYPE;
  v_correo_empleado C##finnk.tab_listado_empleados.correo_empleado%TYPE;
  v_telefono_empleado C##finnk.tab_listado_empleados.telefono_empleado%TYPE;
  v_salario_empleado C##finnk.tab_listado_empleados.salario_empleado%TYPE;
  v_puesto_empleado C##finnk.tab_listado_empleados.puesto_empleado%TYPE;
  v_nacionalidad_empleado C##finnk.tab_listado_empleados.nacionalidad_empleado%TYPE;
  v_estado_empleado C##finnk.tab_listado_empleados.estado_empleado%TYPE;
  v_fk_restaurante C##finnk.tab_listado_empleados.fk_restaurante%TYPE;
BEGIN
  OPEN empleados_disponibles_cursor;
  
  LOOP
    FETCH empleados_disponibles_cursor INTO v_id_empleado, v_nombre_empleado, v_apellidos_empleado, v_correo_empleado, v_telefono_empleado, v_salario_empleado, v_puesto_empleado, v_nacionalidad_empleado, v_estado_empleado, v_fk_restaurante;
    
    EXIT WHEN empleados_disponibles_cursor%NOTFOUND;
    
    -- Mostrar los datos de los empleados disponibles
    DBMS_OUTPUT.PUT_LINE('ID Empleado: ' || v_id_empleado || ', Nombre: ' || v_nombre_empleado || ' ' || v_apellidos_empleado || ', Correo: ' || v_correo_empleado || ', Teléfono: ' || v_telefono_empleado || ', Salario: ' || v_salario_empleado || ', Puesto: ' || v_puesto_empleado || ', Nacionalidad: ' || v_nacionalidad_empleado || ', Estado: ' || v_estado_empleado || ', Restaurante: ' || v_fk_restaurante);
  END LOOP;
  
  CLOSE empleados_disponibles_cursor;
END;

--C12
-- Cursor para obtener todos los correos de los empleados
DECLARE
  CURSOR correos_empleados_cursor IS
    SELECT correo_empleado FROM C##finnk.tab_listado_empleados;
    
  -- Variable para almacenar el correo del empleado
  v_correo_empleado C##finnk.tab_listado_empleados.correo_empleado%TYPE;
BEGIN
  OPEN correos_empleados_cursor;
  
  LOOP
    FETCH correos_empleados_cursor INTO v_correo_empleado;
    
    EXIT WHEN correos_empleados_cursor%NOTFOUND;
    
    -- Mostrar el correo del empleado
    DBMS_OUTPUT.PUT_LINE('Correo: ' || v_correo_empleado);
  END LOOP;
  
  CLOSE correos_empleados_cursor;
END;


--C13
-- Cursor para obtener todos los Recomendados
DECLARE
  CURSOR recomendados_cursor IS
    SELECT id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida
    FROM C##finnk.tab_catalogo_comidas
    WHERE estado_comida = 'Y'; -- Modifica la condición según tus requisitos
    
  -- Variables para almacenar los datos del cursor
  v_id_catalogo C##finnk.tab_catalogo_comidas.id_catalogo%TYPE;
  v_imagen_comida C##finnk.tab_catalogo_comidas.imagen_comida%TYPE;
  v_nombre_comida C##finnk.tab_catalogo_comidas.nombre_comida%TYPE;
  v_precio_comida C##finnk.tab_catalogo_comidas.precio_comida%TYPE;
  v_existencias_comida C##finnk.tab_catalogo_comidas.existencias_comida%TYPE;
  v_estado_comida C##finnk.tab_catalogo_comidas.estado_comida%TYPE;
BEGIN
  OPEN recomendados_cursor;
  
  LOOP
    FETCH recomendados_cursor INTO v_id_catalogo, v_imagen_comida, v_nombre_comida, v_precio_comida, v_existencias_comida, v_estado_comida;
    
    EXIT WHEN recomendados_cursor%NOTFOUND;
    
    -- Mostrar los datos de los elementos recomendados
    DBMS_OUTPUT.PUT_LINE('ID: ' || v_id_catalogo || ', Nombre: ' || v_nombre_comida || ', Precio: ' || v_precio_comida || ', Existencias: ' || v_existencias_comida);
  END LOOP;
  
  CLOSE recomendados_cursor;
END;

--C14
-- Cursor para obtener todos los NO Recomendados
DECLARE
  CURSOR recomendados_cursor IS
    SELECT id_catalogo, imagen_comida, nombre_comida, precio_comida, existencias_comida, estado_comida
    FROM C##finnk.tab_catalogo_comidas
    WHERE estado_comida = 'N';

  -- Variables for storing cursor data
  v_id_catalogo C##finnk.tab_catalogo_comidas.id_catalogo%TYPE;
  v_imagen_comida C##finnk.tab_catalogo_comidas.imagen_comida%TYPE;
  v_nombre_comida C##finnk.tab_catalogo_comidas.nombre_comida%TYPE;
  v_precio_comida C##finnk.tab_catalogo_comidas.precio_comida%TYPE;
  v_existencias_comida C##finnk.tab_catalogo_comidas.existencias_comida%TYPE;
  v_estado_comida C##finnk.tab_catalogo_comidas.estado_comida%TYPE;
BEGIN
  OPEN recomendados_cursor;
  
  LOOP
    FETCH recomendados_cursor INTO v_id_catalogo, v_imagen_comida, v_nombre_comida, v_precio_comida, v_existencias_comida, v_estado_comida;
    
    EXIT WHEN recomendados_cursor%NOTFOUND;
    
    -- Display the data of recommended items
    DBMS_OUTPUT.PUT_LINE('ID: ' || v_id_catalogo || ', Nombre: ' || v_nombre_comida || ', Precio: ' || v_precio_comida || ', Existencias: ' || v_existencias_comida);
  END LOOP;
  
  CLOSE recomendados_cursor;
END;
--C15
-- Cursor para obtener todos los correos de los clientes
DECLARE
  CURSOR clientes_correo_cursor IS
    SELECT correo_cliente FROM C##finnk.tab_listado_clientes;
    
  -- Variable para almacenar el correo del cliente
  v_correo_cliente C##finnk.tab_listado_clientes.correo_cliente%TYPE;
BEGIN
  OPEN clientes_correo_cursor;
  
  LOOP
    FETCH clientes_correo_cursor INTO v_correo_cliente;
    
    EXIT WHEN clientes_correo_cursor%NOTFOUND;
    
    -- Mostrar el correo del cliente
    DBMS_OUTPUT.PUT_LINE('Correo: ' || v_correo_cliente);
  END LOOP;
  
  CLOSE clientes_correo_cursor;
END;


